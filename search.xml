<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FlexBox布局</title>
    <url>/2020/08/19/FlexBox%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="父视图布局"><a href="#父视图布局" class="headerlink" title="父视图布局"></a>父视图布局</h2><h2 id="标题一、flexDirection"><a href="#标题一、flexDirection" class="headerlink" title="标题一、flexDirection"></a>标题一、flexDirection</h2><p>1.flexDirection默认侧轴从上到下排列<br>row:主轴(行)     column侧轴(列) reverse(反向)<br>2.flexDirection:’row’ 主轴<br>3.flexDirection:’row-reverse’主轴反向</p>
<h2 id="二、flexWrap"><a href="#二、flexWrap" class="headerlink" title="二、flexWrap"></a>二、flexWrap</h2><p>flexWrap 属性定义了子元素在父视图内是否允许多行排列，默认为nowrap</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">nowrap flex的元素之排列在一行上，可能导致溢出</span><br><span class="line">wrap flex的元素在一行排列不下时，就进行多行排列</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三、JustifyContent"><a href="#三、JustifyContent" class="headerlink" title="三、JustifyContent"></a>三、JustifyContent</h2><p>JustifyContent属性定义了浏览器如何分配顺着父容器主轴的弹性（Flex）元素之间及其周围的空间，默认为flex-start。对应的这些可选项有：flex-start、center、flex-end、space-around、space-between以及space-evenly。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">flex-start(<span class="keyword">default</span>)</span><br><span class="line">从行首开始排列。每行第一个元素与行首对齐，同时所有后续的弹性元素与前一个对齐。</span><br><span class="line">flex-end</span><br><span class="line">从行尾开始排列。每行最后一个弹性元素与行尾对齐，其它元素与后一个对齐。</span><br><span class="line">center（水平居中）</span><br><span class="line">伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。</span><br><span class="line">space-around</span><br><span class="line">在每行上均匀分配弹性元。相邻元素间距相同。每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是和相邻元素之间距离的一半</span><br><span class="line">space-evenly</span><br><span class="line">间距都相同</span><br><span class="line">space-between</span><br><span class="line">在每行上均匀分配弹性元素。相邻元素间距相同。每行第一个元素到行尾的距离相同</span><br></pre></td></tr></table></figure>

<h2 id="四、alignItems"><a href="#四、alignItems" class="headerlink" title="四、alignItems"></a>四、alignItems</h2><p>alignItems属性以与justifyContent相同的方式在侧轴方向上将当前行上的弹性元素对齐，默认为stretch。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">flex-start   元素向轴起点对齐</span><br><span class="line">flex-end     元素向轴终点对齐。</span><br><span class="line">center (垂直居中)元素在侧轴居中。如果元素在侧轴上的高度高于其容器。那么两个方向上溢出距离相同</span><br><span class="line">stretch      弹性元素被在侧轴方向被拉伸到与容器的高度或宽度</span><br></pre></td></tr></table></figure>

<h2 id="子视图布局"><a href="#子视图布局" class="headerlink" title="子视图布局"></a>子视图布局</h2><h2 id="一、alignSelf"><a href="#一、alignSelf" class="headerlink" title="一、alignSelf"></a>一、alignSelf</h2><p>alignSelf属性以属性定义了flex容器内被选中项目的对齐方式。注意：alignSelf属性可以重写灵活容器alignItems属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">auto(defalut)元素继承了它的付容器的align-itemss属性。如果没有父容器则为stretch</span><br><span class="line">stretch 元素被拉伸以适应容器</span><br><span class="line">center 元素位于容器中心</span><br><span class="line">flex-start 元素位于容器开头</span><br><span class="line">flex-end 元素位于容器结尾</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二、flex"><a href="#二、flex" class="headerlink" title="二、flex"></a>二、flex</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;flex-grow&quot;</span>、<span class="string">&quot;flex-shrink&quot;</span>、<span class="string">&quot;flex-basis&quot;</span>三个属性的缩写，</span><br><span class="line">其中第二个和第三个参数是可选参数</span><br><span class="line">默认值为“<span class="number">0</span> <span class="number">1</span> auto”</span><br><span class="line">宽度= 弹性宽度*（flexGrow/sum(flexGrow)）</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
  <entry>
    <title>React Native之ListView组件</title>
    <url>/2020/08/19/React%20Native%E7%BB%84%E4%BB%B6%E4%B9%8B%20ListView%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListView</b>组件是React Native中一个比较核心的组件，用途非常的广；该组件设计用来高效的展示处置滚动的数据列表：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.1 首先创建一个<font color=red><b>ListView.Data.Source</b></font>数据源，然后给它传递一个普通的数据数组；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1.2 使用数据源(data source)实例化一个ListView组件，定义一个<font color=red><b>renderRow</b></font>回调函数，这个函数会接受数组中的每一个数据作为参数，并返回一个可渲染的组件(就是列表的每一行的item)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> GListViewDemo = React.createClss(&#123;</span><br><span class="line">    <span class="comment">//设置初始值</span></span><br><span class="line">    getInitialState()&#123;</span><br><span class="line">          <span class="comment">//设置数据源</span></span><br><span class="line">          <span class="keyword">var</span> ds = <span class="keyword">new</span> ListView.DataSource(&#123;<span class="attr">rowHasChanged</span>: <span class="function">(<span class="params">r1, r2</span>) =&gt;</span>r1 !== r2&#125;);</span><br><span class="line">          <span class="comment">//设置返回数据</span></span><br><span class="line">          <span class="keyword">return</span>&#123;</span><br><span class="line">            dataSource: ds.cloneWithRows(Wine)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//设置render函数</span></span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            &lt;ListView </span><br><span class="line">            dataSource=&#123;<span class="built_in">this</span>.state.dataSource&#125;   <span class="comment">//数据源</span></span><br><span class="line">            renderRow=&#123;<span class="built_in">this</span>.renderRow&#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//返回具体的cell</span></span><br><span class="line">renderRow(rowData,sectionID,rowID,highlightRow)&#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;TouchableOpacity activeOpacity=&#123;<span class="number">0.5</span>&#125; onPress&#123;<span class="function">()=&gt;</span>&#123;AlertIOS.alert(<span class="string">&#x27;点击了&#x27;</span>+rowID+<span class="string">&#x27;行&#x27;</span>)&#125;&#125;</span><br><span class="line">        &lt;View style=&#123;styles.cellViewStyle&#125;&gt;</span><br><span class="line">        &#123;<span class="comment">/*左边的图片*/</span>&#125;</span><br><span class="line">        &lt;Image source=&#123;&#123;<span class="attr">uri</span>: rowData.image&#125;&#125; style=&#123;styles.leftImageStyle&#125;/&gt;</span><br><span class="line">        )</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二、ListView常用的属性"><a href="#二、ListView常用的属性" class="headerlink" title="二、ListView常用的属性"></a>二、ListView常用的属性</h2><p><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>ScrollView</font></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相关属性样式全部继承<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>dataSource</font></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListViewDataSource 设置ListView的数据源<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>initialListSize</font></b>&nbsp;&nbsp;&nbsp;&nbsp;number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;设置ListView组件刚刚加载的时候渲染的列表行数，用这个属性确定首屏或者首页加载的数量，而不是花大量的时间渲染加载很多页面数据，提高性能。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>onChangeVisibleRows  </font></b><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; function  (visibleRows,changedRows)=&gt;void。当可见的行发生变化的时候回调该方法。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>onEndReachedThreshold&nbsp;&nbsp;&nbsp;&nbsp;   </font></b>number <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当偏移量达到设置的临界值调用onEndReached<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>onEndReached&nbsp;&nbsp;&nbsp;&nbsp;   </font></b>function<br/>&nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;当所有的数据项行被渲染之后,并且列表往下进行滚动。一直滚动到距离底部onEndReachedThredshold设置的值进行回调该方法。原生的滚动事件进行传递(通过参数的形式)。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>pageSize  &nbsp;&nbsp;&nbsp;&nbsp;</font></b>number <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每一次事件的循环渲染的行数<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>removeClippedSubviews &nbsp;&nbsp;&nbsp;&nbsp;</font></b>bool <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该属性用于提供大数据列表的滚动性能。该使用的时候需要给每一行(row)的布局添加over:’hidden’样式。该属性默认是开启状态<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>renderFooter&nbsp;&nbsp;&nbsp;&nbsp; </font></b>function 方法  ()=&gt;renderable<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在每次渲染过程中头和尾总会重新进行渲染。如果发现该重新绘制的性能开销比较大的时候，可以使用StaticContainer容器或者其他合适的组件。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>renderHeader&nbsp;&nbsp;&nbsp;&nbsp;  </font></b>function方法<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在每一次渲染过程中Footer(尾)该会一直在列表的底部，header(头)该会一直在列表的头部，用法同上。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>renderRow&nbsp;&nbsp;&nbsp;&nbsp;</font></b>function <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(rowData,sectionID,rowID,highlightRow)=&gt;renderable<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该方法有四个参数，其中分别为数据源中一条数据，分组的ID，行的ID，以及标记是否是高亮选中的状态信息。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>renderScrollComponent&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b>function<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法 (props)=&gt;renderable  该方法可以返回一个可以滚动的组件。默认该会返回一个ScrollView<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>renderSectionHeader &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function (sectionData,sectionID)=&gt;renderable  <br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果设置了该方法，这样会为每一个section渲染一个粘性的header视图。该视图粘性的效果是当刚刚被渲染开始的时候，该会处于对应的内容的顶部，然后开始滑动的时候，该会跑到屏幕的顶端。直到滑动到下一个section的header(头)视图，然后被替代为止。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>renderSeparator <br/></font></b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function  (sectionID,rowID,adjacentRowHighlighted)=&gt;renderable<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果设置该方法，会在被每一行的下面渲染一个组件作为分隔。除了每一个section分组的头部视图前面的最后一行。<br/><br><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>scrollRenderAheadDistance &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number</font></b><br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行设置当该行进入屏幕多少像素以内之后就开始渲染该行</p>
<h2 id="三、ListView的高阶特性"><a href="#三、ListView的高阶特性" class="headerlink" title="三、ListView的高阶特性"></a>三、ListView的高阶特性</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ListView同样支持一些高级特性，包括设置每一组的粘性的头部(类似于iPhone)、支持设置列表的header以及footer视图、当数据列表滑动到最底部的时候支持onEndReached方法回调、设备屏幕列表可见的视图数据发生变化的时候回调onChangeVisibleRows以及一些性能方面的优化特性。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ListView设计的时候，当需要动态加载非常大的数据的时候，下面有一些方法性能优化的方法可以让我们的ListView滚动的时候更加平滑：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=red>（1）只更新渲染数据变化的那一行  ，rowHasChanged方法会告诉ListView组件是否需要重新渲染当前那一行。</font><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color=red>（2）选择渲染的频率，默认情况下面每一个event-loop(事件循环)只会渲染一行(可以同pageSize自定义属性设置)。这样可以把大的工作量进行分隔，提供整体渲染的性能。</font></p>
]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>移动端页面元素拖动吸附功能</title>
    <url>/2020/08/19/Inertia_%20%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%85%83%E7%B4%A0%E6%8B%96%E5%8A%A8%E5%90%B8%E9%99%84%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="Inertia-移动端页面元素拖动吸附功能"><a href="#Inertia-移动端页面元素拖动吸附功能" class="headerlink" title="Inertia: 移动端页面元素拖动吸附功能"></a>Inertia: 移动端页面元素拖动吸附功能</h1><p>移动端页面元素拖动吸附功能效果图如下：<br>    <img src="https://img-blog.csdnimg.cn/20191120095208487.gif" alt="在这里插入图片描述"></p>
<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>1.在页面引用inertia.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;inertia.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<p>2.获取需要绑定拖动吸附功能的元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;J-page&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"> var ele &#x3D; document.getElementById(&#39;J-page&#39;);</span><br></pre></td></tr></table></figure>
<p>3.创建一个Inertia对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;创建一个Inertia对象     </span><br><span class="line">var obf &#x3D; new Inertia(ele,options,initPos);</span><br></pre></td></tr></table></figure>
<p>4.调用初始化方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">obf.init();&#x2F;&#x2F;调用初始化方法</span><br></pre></td></tr></table></figure>
<h2 id="可选项"><a href="#可选项" class="headerlink" title="可选项"></a>可选项</h2><p>1.通过Inertia构造函数传入第二个参数options</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 控制可拖动元素的上下左右的边界，&#x2F;&#x2F;包括 top, bottom, left, right四个选项         </span><br><span class="line">var options&#x3D;&#123;</span><br><span class="line">   border:&#123;              </span><br><span class="line">           left:&#39;2&#39;,              </span><br><span class="line">          right:&#39;2&#39;,            </span><br><span class="line">          top:&#39;20&#39;,            </span><br><span class="line">          bottom:&#39;10&#39;,               </span><br><span class="line">          speed:100           </span><br><span class="line">       &#125;    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>2.initPos: 可拖动元素的初始位置, 包括posX, posY, 水平方向和垂直方向上的位置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;拖动元素的初始位置 </span><br><span class="line">var initPos&#x3D;&#123;           </span><br><span class="line">    posX :&#39;10&#39;,&#x2F;&#x2F;this.computedBorder.right,  可移动的最右侧</span><br><span class="line">    posY :&#39;10&#39;   </span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure>
<p>3.speed: 自动吸附的速度, 默认值为10</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.物体一定要设置transform属性, 最好设置为transform: translate3d(0px, 0px, 0px)<br>2.物体设置定位, 定位在 左上角, 即top: 0; left: 0;<br>3.建议物体为正方行或者圆形, 如不是, 请设置padding属性, 再单独设置其他属性<br>4.如自行设置options中border属性, 需要top, bottom, left, right都设置<br>5.如自行设置options中initPos属性, 需要posX, posY都设置</p>
]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
  <entry>
    <title>React Native ES6----写法总结</title>
    <url>/2020/08/19/React%20Native%20ES6----%E5%86%99%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p> <strong>一、每个界面，我们需要引入一些我们依赖的模块<br>拿“react”，“react-native”举例，引入的关键字就是import，基本写法如下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View,Text,StyleSheet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> <strong>二、组件化是react/react-native的核心，如何写一个组件呢？</strong><br> react/react-native是通过类的方式进行的，一个组件的基本书写方式是这样的   ：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;我是Component&lt;/Text&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>三、一个组件写好后，需要将组件抛出去给别的组件使用</strong><br>在react/react-native中的引入方式就是export关键字：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;我是ThirdPageComponent&lt;/Text&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>四、写好了一个组件，我们这个组件的样式总要控制吧？这时候需要用到StyleSheet关键字，它有一个create（）方法，接受一个对象作为参数。从而实现了样式的写法。</strong> </p>
<p>代码片段类似这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    container:&#123;</span><br><span class="line">        backgroundColor: <span class="string">&quot;#CCCCCC&quot;</span>,</span><br><span class="line">        flex:<span class="number">1</span>,</span><br><span class="line">        justifyContent: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">        alignItems: <span class="string">&quot;center&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>五、一般而言，一个app我们需要注册一下才能使用，这个就相当于react的入口。使用的关键字是AppRegistry，基本语法就是： </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">AppRegistry.registerComponent(‘AwesomeProject’, <span class="function">() =&gt;</span> App); </span><br></pre></td></tr></table></figure>
<p><strong>其中这个App是一个组件。一般是最外层的入口组件。</strong></p>
<p><strong>六、react、react-native中最重要的两个概念</strong><br><strong>1、prop</strong><br>其中prop是属性，不可改变，主要用于子组件和父组件的传值。<br><strong>2、state</strong><br>state代表状态，主要用于界面反馈，它的值是可以改变的。改变的方式是this.setState()函数。<br>那prop到底是怎么用的呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//组件这样去写</span></span><br><span class="line"><span class="keyword">import</span> React , &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; AppRegistry&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">&#x27;./Child&#x27;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Child title=<span class="string">&quot;hello&quot;</span>&gt;&lt;/Child&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AppRegistry.registerComponent(<span class="string">&#x27;AwesomeProject&#x27;</span>, <span class="function">() =&gt;</span> App);</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//我们这样写子组件</span></span><br><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View,Text,StyleSheet &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;&#123;<span class="built_in">this</span>.props.title&#125;&lt;/Text&gt;</span><br><span class="line">            &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在父组件中我们注册了App，并且调用了子组件Child，给它设定了属性 title =“hello”，然后在子组件中 {this.props.title} 展示在界面中。</p>
<p>那么state怎么使用呢？接着刚才的示例，我们对子组件稍作改变：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React,&#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View,Text,Button,StyleSheet,Alert &#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="built_in">super</span>(props);</span><br><span class="line">        <span class="built_in">this</span>.state = &#123;</span><br><span class="line">            toggle: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    onToggle() &#123;</span><br><span class="line">        <span class="comment">//Alert.alert(&#x27;Button has been pressed!&#x27;);</span></span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">toggle</span>: !<span class="built_in">this</span>.state.toggle&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">     render() &#123;</span><br><span class="line">        <span class="keyword">let</span> display = <span class="built_in">this</span>.state.toggle?<span class="built_in">this</span>.props.title:<span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">                &lt;View&gt;</span><br><span class="line">                &lt;Text&gt;&#123;display&#125;&lt;/Text&gt;</span><br><span class="line">                &lt;View&gt;</span><br><span class="line">                    &lt;Button</span><br><span class="line">                      onPress=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.onToggle()&#125;</span><br><span class="line">                      title=<span class="string">&quot;toggle&quot;</span></span><br><span class="line">                      color=<span class="string">&quot;#3c78ff&quot;</span></span><br><span class="line">                      accessibilityLabel=<span class="string">&quot;Learn more about this purple button&quot;</span></span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;/View&gt;</span><br><span class="line">             &lt;/View&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样我们就可以通过改变toggle的状态值来进行界面操作（通过操作数据改变界面）<br>onPress事件，相当于我们的click事件。在写法上需要理解一下。 </p>
<p><strong>七、在上面的Button组件中，我们的onPress事件是这样写的。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;Button</span><br><span class="line">      onPress=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.onToggle()&#125;</span><br><span class="line">      title=<span class="string">&quot;toggle&quot;</span></span><br><span class="line">      color=<span class="string">&quot;#3c78ff&quot;</span></span><br><span class="line">      accessibilityLabel=<span class="string">&quot;Learn more about this purple button&quot;</span></span><br><span class="line"> /&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：onPress={() =&gt; this.onToggle()}，这个代表什么意思呢？<br>相当于onPress = function(){ //coding }<br>而不是onPress = (function(){ //coding })();<br>区别是，一个是函数，一个是执行函数。<br>那么我们这样写onPress看对不对：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onPress=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.onToggle&#125;<span class="comment">//明显不对，因为this.onToggle是一个函数，我们的目的是onPress之后toggle的状态值改变！！所以后面需要执行，就有();</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>通过上面的理解，其实onPress还是可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">onPress=&#123;<span class="built_in">this</span>.onToggle.bind(<span class="built_in">this</span>)&#125;<span class="comment">//这样就符合逻辑</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这里的bind（this）代表我需要把this的指向传递下去。为什么呢？因为this.onToggle不是箭头函数，而上面的是箭头函数。</p>
]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>React Native其他组件之 Touchable系列组件</title>
    <url>/2020/08/19/React%20Native%E7%BB%84%E4%BB%B6%E4%B9%8BTouchable%20%E7%B3%BB%E5%88%97%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="一、高亮触摸-TouchableHighlight"><a href="#一、高亮触摸-TouchableHighlight" class="headerlink" title="一、高亮触摸 TouchableHighlight "></a>一、高亮触摸 <font color=red>TouchableHighlight </font></h2><p><b>常用属性:</b><br><b><font color=red>activeOpacity</font> number</b><br>设置组件在进行触摸的时候， 显示的不透明度（取值在0-1之间）<br/><br><b><font color=red>onHideUnderlay  </font> function方法</b><br>当底层被隐藏的时候调用<br/><br><b><font color=red>onShowUnderlay  </font> function 方法</b><br>当底层显示的时候调用<br/><br><b><font color=red>style</font> </b><br>可以设置控件的风格演示，该风格演示可以参与View组件的style<br/><br><b><font color=red>underlayColor</font> </b><br>当触摸或者点击控件的时候显示出的颜色<br/></p>
<h2 id="二、不透明触摸-TouchableOpacity"><a href="#二、不透明触摸-TouchableOpacity" class="headerlink" title="二、不透明触摸 TouchableOpacity"></a>二、不透明触摸 TouchableOpacity</h2><p>该组件封装了响应触摸事件，当点击按下的时候，该组件的透明度会降低。<br><b>常用属性:</b><br><b><font color=red>activeOpacity </font> number</b><br>设置当用户触摸的时候，组件的透明度</p>
<h2 id="三、常见的触摸事件"><a href="#三、常见的触摸事件" class="headerlink" title="三、常见的触摸事件"></a>三、常见的触摸事件</h2><p>在开发中会经常的用到点击、按下、抬起、长按等触发事件，那么在TouchableOpacity中又是如何展示呢？</p>
<p text-indent=2>1.onLongPress：长按事件</p>
2.onPressIn：触摸进入事件
3.onPressOut：触摸释放事件
4.onPress：触摸点击事件

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  StyleSheet,</span><br><span class="line">  View,</span><br><span class="line">  Text,</span><br><span class="line">  TouchableOpacity</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">var</span> DTouchabelDemo = React.createClass(&#125;&#123;</span><br><span class="line">    getInitialState()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            text:<span class="string">&#x27;hello&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          </span><br><span class="line">            &lt; TouchableOpacity</span><br><span class="line">              onLongPress=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">&quot;长按&quot;</span> &#125;)&#125;</span><br><span class="line">              onPressIn=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">&quot;按下&quot;</span> &#125;)&#125;</span><br><span class="line">              onPressOut=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">&quot;松开&quot;</span> &#125;)&#125;</span><br><span class="line">              onPress =&#123;<span class="built_in">this</span>.show.bind(<span class="built_in">this</span>,<span class="string">&#x27;做最特别的一个&#x27;</span>)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              </span><br><span class="line">                &#123;<span class="built_in">this</span>.state.text&#125;</span><br><span class="line">                 </span><br><span class="line">                    </span><br><span class="line">            </span><br><span class="line">        )</span><br><span class="line">  &#125;</span><br><span class="line">  activeEvent(event)&#123;</span><br><span class="line">      <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">          text:event</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123; </span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="built_in">super</span>(props);</span><br><span class="line">    <span class="built_in">this</span>.state = &#123;</span><br><span class="line">      text: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  show(text) &#123; </span><br><span class="line">    alert(text);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      </span><br><span class="line">        &lt; TouchableOpacity</span><br><span class="line">          onLongPress=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">&quot;长按&quot;</span> &#125;)&#125;</span><br><span class="line">          onPressIn=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">&quot;按下&quot;</span> &#125;)&#125;</span><br><span class="line">          onPressOut=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">text</span>: <span class="string">&quot;松开&quot;</span> &#125;)&#125;</span><br><span class="line">          onPress =&#123;<span class="built_in">this</span>.show.bind(<span class="built_in">this</span>,<span class="string">&#x27;做最特别的一个&#x27;</span>)&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          </span><br><span class="line">            &#123;<span class="built_in">this</span>.state.text&#125;</span><br><span class="line">             </span><br><span class="line">                </span><br><span class="line">        </span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;  </span><br><span class="line">  container: &#123;</span><br><span class="line">    flex: <span class="number">1</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    paddingHorizontal:<span class="number">10</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;white&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  button: &#123;</span><br><span class="line">    marginLeft: <span class="number">30</span>,</span><br><span class="line">    marginTop: <span class="number">30</span>,</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    backgroundColor: <span class="string">&#x27;#18B4FF&#x27;</span>,</span><br><span class="line">    justifyContent: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    borderRadius: <span class="number">50</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  buttonText: &#123;</span><br><span class="line">   color:<span class="string">&#x27;white&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  countContainer: &#123;</span><br><span class="line">    alignItems: <span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    padding:<span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  countText: &#123;</span><br><span class="line">    color:<span class="string">&#x27;green&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>React Native组件生命周期</title>
    <url>/2020/08/19/React%20Native%E7%BB%84%E4%BB%B6%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<h2 id="一、看图分析"><a href="#一、看图分析" class="headerlink" title="一、看图分析"></a>一、看图分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在下图中描述了ReactNative中组件的生命周期，我们可以根据其中的执行顺序在对应的函数中做对应的操作</p>
<p><img src="https://img-blog.csdnimg.cn/20200113163541483.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><b>React Native组件的生命周期大致可以分为<font color=red>实例化阶段、运行阶段</font>和<font color=red>销毁阶段</font>，其中最常用的为<font color=red>实例化阶段</font>，该阶段就是组件的构建、展示时期，需要我们根据几个函数的调用过程，控制好组件的展示和逻辑的处理</b></p>

<h2 id="二、实例化阶段函数功能分析"><a href="#二、实例化阶段函数功能分析" class="headerlink" title="二、实例化阶段函数功能分析"></a>二、实例化阶段函数功能分析</h2><p> <b><font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getDefaultProps（用于不可改变的属性值）</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该函数用于初始化一些默认的属性，通常会将固定的内容放在这个函数中进行初始化和赋值；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在组件中，可以利用this.props获取在这里初始化它的属性，由于组件初始化后，再次使用该组件不会调用getDefaultProps函数，所以组件自己不可以自己修改props（即：props可认为是只读的），只可由其他组件调用它时在外部修改<br/></p>
<p><b><font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getInitialState （可以改变的值）</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该函数是用于对组件的一些状态进行初始化；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于该函数不同于getDefaultProps，在以后的过程中，会再次调用，所以可以将控制控件的状态的一些变量放在这里初始化，如控件上显示的文字，可以通过<font color=red>this.state</font>来获取值，通过<font color=red>this.setState</font>来修改state值，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.setState(&#123;</span><br><span class="line">    activePage: activePage,</span><br><span class="line">    currentX: contentOffSetX</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注意：一旦调用了this.setState方法，组件一定会调用render方法，对组件进行再次的渲染，不过，如果React框架会自动根据DOM的状态来判断是否需要真正的渲染。</p>
<p><b><font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;comonentWillMount</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相当于OC中的ViewWillAppear方法，在组件将要呗加载在视图上之前调用，功能相对较少。</p>
<p><b><font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;render</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;render是一个组件中必须有的方法，本质上是一个函数，并返回JSX或其他组件来构成DOM，和Android的XML布局类似，注意：只能返回一个顶级元素；<br/>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;此外，在render函数中，只可通过this.state和this.props来访问在之前函数中初始化的数据值。</p>
<p><b><font color=red>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;componentDidMount</font></b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在调用了render方法后，组件加载成功并被成功渲染出来以后，所要执行的后续操作，一般会在这个函数中处理网络请求等加载数据的操作；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为UI已经成功被渲染出来所以放在这个函数里进行请求操作，不会出现UI上的错误。<br/><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下图是利用了fetch API来异步请求WebAPI来加载数据：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在此方法中加载网络数据</span></span><br><span class="line">componentDidMount()&#123;</span><br><span class="line">    <span class="built_in">this</span>.fetchData();</span><br><span class="line">&#125;</span><br><span class="line">fetchData()&#123;</span><br><span class="line">    <span class="keyword">var</span> me =<span class="built_in">this</span>;</span><br><span class="line">    fetch(me.props.api)</span><br><span class="line">        .then(<span class="function">(<span class="params">response</span>) =&gt;</span>response.json())</span><br><span class="line">        .then(<span class="function">(<span class="params">responseData</span>) =&gt;</span>&#123;</span><br><span class="line">            me.setState(&#123;</span><br><span class="line">                dataSource:responseData.data</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .done(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            me.start();</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、存在期阶段函数功能分析"><a href="#三、存在期阶段函数功能分析" class="headerlink" title="三、存在期阶段函数功能分析"></a>三、存在期阶段函数功能分析</h2><p><font color=red>componentWillReceiveProps</font><br>指父元素对组件的props或state进行了修改<br/><br><font color=red>shouldComponentUpdate</font><br>一般用于优化，可以返回false或true来控制是否进行渲染<br/><br><font color=red>componentWillUpdate</font><br>组件刷新前调用，类似componentWillMount<br/><br><font color=red>componentDidUpdate</font><br>更新后的hook，该方法会在RN卸载之前调用，无参无返回值，在该方法中，需要对该组件当中申请或者订阅的某些资源与消息进行释放。<br/></p>
<h2 id="四、销毁期阶段函数功能分析"><a href="#四、销毁期阶段函数功能分析" class="headerlink" title="四、销毁期阶段函数功能分析"></a>四、销毁期阶段函数功能分析</h2><p>用于清理一些无用的内容，如：点击事件Listener,只有一个过程：<font color=red>componentWillUnmount</font></p>
<h2 id="五、常用知识点分析"><a href="#五、常用知识点分析" class="headerlink" title="五、常用知识点分析"></a>五、常用知识点分析</h2><p><b>5.1 this.state</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;开发中组件免不了要与用户互动，React的一大创新，就是将组件看成是一个状态机，一开始有一个初始状态，然后用户交互，导致状态变化，从而触发重新渲染UI。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;举个例子：</p>
<p><img src="https://img-blog.csdnimg.cn/2020011316593043.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当用户点击组件，导致状态变化，this.setState方法就修改状态值，每次修改以后自动调用this.render方法，在此渲染组件<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可以把组件堪称一个“状态机”，根据不同的status有不同的UI展示。只要使用setState改变状态值，根据diff算法算出来有差以后，就会执行ReactDom的render方法，重新渲染页面。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=red>注意：由于this.props和this.state都用于描述组件的特性，可能会产生混淆。一个简单的区分方法是，this.props表示那些一旦定义，就不再改变的特性，而this.state是会随着用户互动而产生变化的特性</font><br/><br><b>5.2 获取真实的DOM节点</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在React Native中，组件并不是真实的DOM节点，而是存在于内存之中的一种数据结构，叫做虚拟DOM（virtual DOM）<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;只有当它插入文档以后，才会变成真实的DOM。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据React的设计，所有的DOM变动，都先在虚拟DOM上发生，然后再将实际发生变动的部分，反映在真实DOM上，这种算法叫做DOM diff。它以极大提高网页的性能表现。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，有时需要从组建获取真实DOM的节点，这时就要用到<font color=red>ref</font>属性；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下图通过一个案例来演示：<br><img src="https://img-blog.csdnimg.cn/20200113170241805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;React Native组件的生命周期，经历了Mount-&gt;Update-&gt;Unmount这三个大的过程，即从创建到销毁的过程，结合OC中的开发经验，我们在以上的基础上应该可以快速的上手ReactNative</p>
<h2 id="七、-ES5和ES6的差异化？"><a href="#七、-ES5和ES6的差异化？" class="headerlink" title="七、 ES5和ES6的差异化？"></a>七、 ES5和ES6的差异化？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;es5、es6都是对ecmascript规范的补充，es5已经大规模使用了，es6目前可能在个别平台存在浏览器兼容性问题<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>区别1：创建组件</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;组件是一个自定义的js对象，在es5中使用React.createClass();在es6中必须继承React.component,然后进行创建</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES5写法  创建类</span></span><br><span class="line"><span class="keyword">var</span> DTouchableDemo = React.createClass(&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(               </span><br><span class="line">                你好，世界！               </span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//ES6写法 创建类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DTouchableDemo</span>  <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    render()&#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">        你好，世界！</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><b>区别2：组件的属性props</b><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在ES6中，其为属性:defaultProps(可以标识static定义在class内，也可以定义在class外)。而在ES5中，其为方法：getDefaultProps:function(){return{name:value}};</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ES5:</span><br><span class="line">    <span class="keyword">var</span> BTestDemo = React.createClass(&#123;<span class="comment">//类名一定要大写开头</span></span><br><span class="line">        getDefaultProps()&#123;<span class="comment">//设置默认属性</span></span><br><span class="line">            <span class="keyword">return</span>&#123;<span class="attr">title</span>:<span class="string">&#x27;HelloWorld&#x27;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        propTypes:&#123;</span><br><span class="line">            title:React.PropTypes.string</span><br><span class="line">        &#125;,<span class="comment">//属性校验器，表示必须是string</span></span><br><span class="line">        render:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="built_in">this</span>.props.title&#125;<span class="comment">//变量用大括号标识</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">ES6:</span><br><span class="line">   <span class="class"><span class="keyword">class</span> <span class="title">CTestDemo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;       </span><br><span class="line">       <span class="comment">//不能再组件定义的时候定义一个属性</span></span><br><span class="line">       render() &#123;</span><br><span class="line">           retrun &#123;<span class="built_in">this</span>.props.title&#125;;           </span><br><span class="line">       &#125;<span class="comment">//开头花括号一定要和小括号隔一个空格，否则识别不出来</span></span><br><span class="line">   &#125; </span><br><span class="line">   <span class="comment">//ES6这两个属性不能写在class内。</span></span><br><span class="line">   CTestDemo.propTypes=&#123;<span class="comment">//属性校验器，表示该属性必须是bool,否则报错</span></span><br><span class="line">       title:React.PropTypes.bool</span><br><span class="line">   &#125;;</span><br><span class="line">   CTestDemo.defaultProps=&#123;<span class="attr">title</span>:<span class="string">&#x27;122&#x27;</span>&#125;<span class="comment">//设置默认属性</span></span><br></pre></td></tr></table></figure>
<p><b>区别3：组件的状态state</b></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ES5:</span><br><span class="line">    <span class="keyword">var</span> ETestDemo = React.createClass(&#123;</span><br><span class="line">        getInitialState()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;<span class="attr">liked</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">ES6:</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">CTestDemo</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造</span></span><br><span class="line">        <span class="keyword">constructor</span>(props)&#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line">            <span class="comment">//初始状态</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;<span class="attr">liked</span>:<span class="literal">false</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>小程序:带参数返回上一页</title>
    <url>/2020/08/19/Page%E9%A1%B5%E9%9D%A2%E5%B8%A6%E5%8F%82%E8%B7%B3%E8%BD%AC%20(1)/</url>
    <content><![CDATA[<h2 id="小程序：-返回上一页并带回参数"><a href="#小程序：-返回上一页并带回参数" class="headerlink" title="小程序： 返回上一页并带回参数"></a>小程序： 返回上一页并带回参数</h2><p><strong>页面跳转的方法参考官方文档：</strong><br><strong><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/route.html">https://mp.weixin.qq.com/debug/wxadoc/dev/framework/app-service/route.html</a></strong><br>前段时间通过物流信息的例子给大家分享了一下<a href="https://jiqingk.github.io/2019/01/30/pagePass/">关于页面带参传值以及json数据传递</a>的应用案例。那今天呢，使用getCurrentPages()，找到上一级页面的Page实例，再通过setData来直接给上一级页面的data设置数据，来实现传参！<br><strong>getCurrentPages函数用于获取当前页面栈的实例，以数组形式按栈的顺序给出</strong><br><strong>1.在子页面点击上一步或者保存数据请求成功以后添加如下代码：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pages = getCurrentPages();</span><br><span class="line"> <span class="keyword">var</span> prevPage = pages[pages.length - <span class="number">2</span>]; <span class="comment">//上一个页面</span></span><br><span class="line">  <span class="comment">//直接调用上一个页面的setData()方法，把数据存到上一个页面中去</span></span><br><span class="line"> prevPage.setData(&#123;</span><br><span class="line">      mydata: &#123;</span><br><span class="line">        id:<span class="number">1</span>,</span><br><span class="line">        b: <span class="number">125</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    wx.navigateBack(&#123;<span class="comment">//返回</span></span><br><span class="line">      delta: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>2.第二部，在父组件里的onshow生命周期里获取参数，对了，前提是需要你在data里建一个mydata对象，如果传过来的是字符串，mydata建立为字符串，就是对应一下会比较好</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pages = getCurrentPages();</span><br><span class="line"><span class="keyword">var</span> currPage = pages[pages.length - <span class="number">1</span>]; <span class="comment">//当前页面</span></span><br><span class="line"><span class="keyword">let</span> json = currPage.data.mydata;</span><br><span class="line"><span class="built_in">console</span>.log(json)<span class="comment">//为传过来的值</span></span><br></pre></td></tr></table></figure>
<p><strong>3.至此，子–&gt;父传值就结束了，如果你使用wx.navigateTo和wx.setStorageSync结合来实现返回上一页以及存取参数的话，会遇到一个问题，就是微信自带页面的返回会一直返回这几个页面，造成路由紊乱<br>这里顺便提一下父–&gt;子传值，很简单就是跳转的时候把参数拼接在链接后面，然后在下一个页面的onload里通过option获取，这其实也不算父-子</strong></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>TabBarIOS与TabBarIOS.Item组件</title>
    <url>/2020/08/19/TabBarIOS%E4%B8%8ETabBarIOS.Item%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="一、TabBarIOS常见的属性"><a href="#一、TabBarIOS常见的属性" class="headerlink" title="一、TabBarIOS常见的属性"></a>一、TabBarIOS常见的属性</h2><ol>
<li><font color=red>View</font>的所有属性都可以被继承</li>
<li><font color=red>barTintColor </font>   colr  设置tab条的背景颜色</li>
<li>tintColor  color 设置tab条上被选中图标的颜色</li>
<li>translucent   bool  设置Tab栏是不是半透明的效果</li>
</ol>
<h2 id="二、TabBarIOS-Item常见的属性"><a href="#二、TabBarIOS-Item常见的属性" class="headerlink" title="二、TabBarIOS.Item常见的属性"></a>二、TabBarIOS.Item常见的属性<a id="more"></a></h2><ol>
<li><strong>badge number</strong>在图标的右上方显示小红色气泡、显示信息</li>
<li><strong>icon Image.propTypes.source</strong><br>Tab按钮自定义的图标、如果systemicon属性被定义了，那么该属性会被忽略</li>
<li><strong>onPress function</strong><br>当Tab按钮被选中的时候进行回调，你可以设置selected=(true)来设置组件被选中</li>
<li><strong>selected bool</strong><br>该属性标志子页面是否可见，如果是一个空白的内容页面，那么一定是忘记了选中任何的一个页面标签Tab</li>
<li><strong>selectedIcon     Image.propTypes.source</strong><br>设置当Tab按钮被选中的时候显示的自定义图标、如果systemIcon属性被设置了，那么该属性会被忽略。如果定义了icon属性，但是当前的selectedIcon属性没有设置，那么该图标会被设置成蓝色</li>
<li><strong>style</strong> 设置样式风格，继承View的样式各种风格</li>
<li><strong>systemIconenum</strong>(“bookmarks”,”contacts”,”downloads”,”favorites”,”featured”,”history”,”more”,”most-recent”,”most-viewed”,”recents”,”search”,”top-rated”)<br>系统预定义的图标，如果你使用这些图标，那么你上面设置的标题，选中的图标都会被这些系统图标所覆盖。</li>
<li><strong>title string</strong><br>在tab按钮图标下面显示的标题信息，如果你设置了SystemIcon属性，那么该属性会被忽略</li>
</ol>
<p> <strong>三、效果案例展示</strong><br> <img src="https://img-blog.csdnimg.cn/20200119093919817.gif" alt="在这里插入图片描述"><br>代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    AppRegistry,</span><br><span class="line">    StyleSheet,</span><br><span class="line">    Text,</span><br><span class="line">    View,</span><br><span class="line">    TabBarIOS</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;react-native&#x27;</span>;</span><br><span class="line"><span class="comment">// 导入系统类</span></span><br><span class="line"><span class="keyword">var</span> Dimensions = <span class="built_in">require</span>(<span class="string">&#x27;Dimensions&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> screenW = Dimensions.get(<span class="string">&#x27;window&#x27;</span>).width;</span><br><span class="line"><span class="keyword">var</span>  TabBarDemo = React.createClass(&#123;</span><br><span class="line">        <span class="comment">// 设置初始值</span></span><br><span class="line">    getInitialState()&#123;</span><br><span class="line">        <span class="keyword">return</span>&#123;</span><br><span class="line">            <span class="comment">// 默认选中的tabBarItem</span></span><br><span class="line">            selectedItem:<span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">     render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">              &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">                    &lt;View style=&#123;styles.navBarStyle&#125;&gt;<span class="xml"><span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.navTitleStyle&#125;</span>&gt;</span>TabBar切换<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span>&lt;/View&gt;</span><br><span class="line">                    &lt;TabBarIOS</span><br><span class="line">                        barTintColor=<span class="string">&#x27;#e8e8e8&#x27;</span></span><br><span class="line">                        tintColor=<span class="string">&quot;purple&quot;</span></span><br><span class="line">                        style=&#123;styles.tabBarStyle&#125;</span><br><span class="line">                    &gt;</span><br><span class="line">                        &lt;TabBarIOS.Item</span><br><span class="line">                            systemIcon=<span class="string">&quot;bookmarks&quot;</span></span><br><span class="line">                            badge=<span class="string">&quot;3&quot;</span></span><br><span class="line">                            selected=&#123;<span class="built_in">this</span>.state.selectedItem == <span class="string">&#x27;home&#x27;</span>&#125;</span><br><span class="line">                            onPress=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                                <span class="built_in">this</span>.setState(&#123;<span class="attr">selectedItem</span>:<span class="string">&#x27;home&#x27;</span>&#125;)</span><br><span class="line">                            &#125;&#125;</span><br><span class="line">                        &gt;</span><br><span class="line">                            &lt;View style=&#123;styles.commonViewStyle&#125;&gt;</span><br><span class="line">                                &lt;Text&gt;bookmarks&lt;/Text&gt;</span><br><span class="line">                            &lt;/View&gt;</span><br><span class="line">                        &lt;/TabBarIOS.Item&gt;</span><br><span class="line">                        &lt;TabBarIOS.Item</span><br><span class="line">                            systemIcon=<span class="string">&quot;downloads&quot;</span></span><br><span class="line">                            selected=&#123;<span class="built_in">this</span>.state.selectedItem == <span class="string">&#x27;second&#x27;</span>&#125;</span><br><span class="line">                            onPress=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                                <span class="built_in">this</span>.setState(&#123;<span class="attr">selectedItem</span>:<span class="string">&#x27;second&#x27;</span>&#125;)</span><br><span class="line">                            &#125;&#125;</span><br><span class="line">                        &gt;</span><br><span class="line">                            &lt;View style=&#123;styles.commonViewStyle&#125;&gt;</span><br><span class="line">                                &lt;Text&gt;downloads&lt;/Text&gt;</span><br><span class="line">                            &lt;/View&gt;</span><br><span class="line">                        &lt;/TabBarIOS.Item&gt;</span><br><span class="line">                        &lt;TabBarIOS.Item</span><br><span class="line">                            systemIcon=<span class="string">&quot;favorites&quot;</span></span><br><span class="line">                            selected=&#123;<span class="built_in">this</span>.state.selectedItem == <span class="string">&#x27;three&#x27;</span>&#125;</span><br><span class="line">                            onPress=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                                <span class="built_in">this</span>.setState(&#123;<span class="attr">selectedItem</span>:<span class="string">&#x27;three&#x27;</span>&#125;)</span><br><span class="line">                            &#125;&#125;</span><br><span class="line">                        &gt;</span><br><span class="line">                            &lt;View style=&#123;styles.commonViewStyle&#125;&gt;</span><br><span class="line">                                &lt;Text&gt;favorites&lt;/Text&gt;</span><br><span class="line">                            &lt;/View&gt;</span><br><span class="line">                        &lt;/TabBarIOS.Item&gt;</span><br><span class="line">                        &lt;TabBarIOS.Item</span><br><span class="line">                            systemIcon=<span class="string">&quot;more&quot;</span></span><br><span class="line">                            selected=&#123;<span class="built_in">this</span>.state.selectedItem == <span class="string">&#x27;four&#x27;</span>&#125;</span><br><span class="line">                            onPress=&#123;<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                                <span class="built_in">this</span>.setState(&#123;<span class="attr">selectedItem</span>:<span class="string">&#x27;four&#x27;</span>&#125;)</span><br><span class="line">                            &#125;&#125;</span><br><span class="line">                        &gt;</span><br><span class="line">                            &lt;View style=&#123;styles.commonViewStyle&#125;&gt;</span><br><span class="line">                                &lt;Text&gt;more&lt;/Text&gt;</span><br><span class="line">                            &lt;/View&gt;</span><br><span class="line">                        &lt;/TabBarIOS.Item&gt;</span><br><span class="line">                    &lt;/TabBarIOS&gt;</span><br><span class="line">              &lt;/View&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</span><br><span class="line">    container: &#123;</span><br><span class="line">        flex:<span class="number">1</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 导航栏样式</span></span><br><span class="line">    navBarStyle:&#123;</span><br><span class="line">        height:<span class="number">64</span>,</span><br><span class="line">        backgroundColor:<span class="string">&#x27;purple&#x27;</span>,</span><br><span class="line">        justifyContent:<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        alignItems:<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    navTitleStyle:&#123;</span><br><span class="line">        color:<span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">        fontSize:<span class="number">20</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    commonViewStyle:&#123;</span><br><span class="line">        flex:<span class="number">1</span>,</span><br><span class="line">        justifyContent:<span class="string">&#x27;center&#x27;</span>,</span><br><span class="line">        alignItems:<span class="string">&#x27;center&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>Vue中观察者模式介绍</title>
    <url>/2020/08/19/Vue%E4%B8%AD%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="Vue中观察者模式解析"><a href="#Vue中观察者模式解析" class="headerlink" title="Vue中观察者模式解析"></a>Vue中观察者模式解析</h2><h2 id="一、观察者模式简介"><a href="#一、观察者模式简介" class="headerlink" title="一、观察者模式简介"></a>一、观察者模式简介<a id="more"></a></h2><p>观察者模式定义了对象间的一种一对多的组合关系，当一个对象的状态发生变化时，所有依赖于它的对象都得到通知并自动刷新。观察者模式必须包含两个角色：观察者和观察对象，两者之间存在“观察”的逻辑关联，当观察对象状态发生改变时，将通知相应的观察者以更新状态。</p>
<h2 id="二、Vue中观察者模式介绍"><a href="#二、Vue中观察者模式介绍" class="headerlink" title="二、Vue中观察者模式介绍"></a>二、Vue中观察者模式介绍</h2><p>Vue框架在数据初始化中使用观察者模式的示意图：<br><img src="https://img-blog.csdnimg.cn/20191114100458972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="三、观察者模式的优缺点"><a href="#三、观察者模式的优缺点" class="headerlink" title="三、观察者模式的优缺点　　"></a>三、观察者模式的优缺点　　</h2><p>被观察对象和观察者之间是抽象耦合，且耦合程度很低，有助于扩展与重用；能进行简单的广播通信，自动通知所有订阅的观察者；观察者并不知道其他观察者的存在，若直接对被观察目标操作，造成一系列的更新，可能产生意外情况。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** * on  绑定 * emit 触发 * off  解绑 *  * //存放事件 * eventList=&#123; *      key:val *      handle:[] * &#125; *  * 1.对多 * on(eventName,callback); *      handle:-------N多个 * 1、判断事件名称是否存在 * 2、如果存在的情况下将CB存放在eventName这个数组当中 * 3、如果不存在创建key值为eventName  val值为数组 *  * 1对多 * emit(eventName,params); * 当调用emit的时候获取到eventName这里的值，对值判断，如果值不存在直接return * 如果存在遍历这个值全局进行调用，然后将params传入这些函数 *  * off(eventName,[callback]) * 当调用off的时候获取到eventName这的值，对值判断，如果值不存在直接return * 如果存在判断callback是否存在 如果存在删除指定的函数 * 如果不存在将当前数组清空 */</span><span class="keyword">const</span> EventList=&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> on = <span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;    <span class="keyword">if</span>(!EventList[eventName])&#123;        EventList[eventName] = [];    &#125;    EventList[eventName].push(callback);&#125;</span><br><span class="line"><span class="keyword">const</span> emit = <span class="function"><span class="keyword">function</span>(<span class="params">eventName,params</span>)</span>&#123;    <span class="keyword">if</span>(!EventList[eventName])<span class="keyword">return</span>;    EventList[eventName].map(<span class="function">(<span class="params">cb</span>)=&gt;</span>&#123;        cb(params)    &#125;)&#125;</span><br><span class="line"><span class="keyword">const</span> off = <span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;    <span class="keyword">if</span>(!EventList[eventName])<span class="keyword">return</span>;    <span class="keyword">if</span>(callback)&#123;        <span class="keyword">let</span> index = EventList[eventName].indexOf(callback);        EventList[eventName].splice(index,<span class="number">1</span>);    &#125;<span class="keyword">else</span>&#123;        EventList[eventName] = [];    &#125;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;    <span class="attr">$on</span>:on,    <span class="attr">$emit</span>:emit,    <span class="attr">$off</span>:off&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Vue</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（三）–小程序切换按钮选中状态</title>
    <url>/2020/08/19/buttonTab/</url>
    <content><![CDATA[<h2 id="小程序实践（三）–小程序切换按钮选中状态"><a href="#小程序实践（三）–小程序切换按钮选中状态" class="headerlink" title="小程序实践（三）–小程序切换按钮选中状态"></a>小程序实践（三）–小程序切换按钮选中状态</h2><p><strong>首先说一下为什么要单独写一个这个呢？在小程序中由于不能够直接对DOM元素进行操作，更没有像jquery那样addClass、removeClass这样简便方法对样式进行改变，个人觉得这个相对来说还是比较方便的，就拿出来在这里跟大家分享一下。如果你有更简单的不防写下来跟大家分享一下！</strong><br><strong>还是先看一下最终实现的效果</strong><br><img src="../images/xcx_1.gif" alt="在这里插入图片描述"><br><strong>接下来就看一下我们是如何实现的<br>1、布局排版，直接附上wxml代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 顶部办理状态 --&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;topView&quot; style&#x3D;&quot;position:fixed;top:49px;left:0;z-index:200&quot;&gt;</span><br><span class="line">  &lt;block wx:for&#x3D;&quot;&#123;&#123;statusList&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;&#123;&#123;item.id&#125;&#125;&quot; class&#x3D;&quot;&#123;&#123;item.id &#x3D;&#x3D; isChecked ? &#39;active&#39;:&#39;&#39;&#125;&#125; topChild&quot; bindtap&#x3D;&quot;choiceStatus&quot;&gt;&#123;&#123;item.statusName&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;block&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2、按钮样式，wxss代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.topView&#123;</span><br><span class="line">  width:100%;</span><br><span class="line">  height:48px;</span><br><span class="line">  display:flex;</span><br><span class="line">  background-color: #ffffff;</span><br><span class="line">  border-bottom:1px solid #e2e1e1;</span><br><span class="line">&#125;</span><br><span class="line">.topChild&#123;</span><br><span class="line">  width:20%;</span><br><span class="line">  height:48px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 3.4;</span><br><span class="line">  font-size:14px;</span><br><span class="line">  color:#333333;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*点击时按钮状态*&#x2F;</span><br><span class="line">.active&#123;</span><br><span class="line">  color:#E31904;</span><br><span class="line">  border-bottom:2px solid #E31904;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、最主要的来了，js代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   *&#x2F;</span><br><span class="line">  data: &#123;</span><br><span class="line">    statusList: [&#123;&#x2F;&#x2F;顶部状态按钮</span><br><span class="line">      &quot;statusName&quot;: &quot;全部&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;all&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;待支付&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;draft&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;待发货&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;waitSolve&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;已发货&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;doingSolve&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;交易成功&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;doneSolve&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ],</span><br><span class="line">    isChecked: 0 &#x2F;&#x2F;判断是否选中</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;绑定顶部状态切换的点击事件</span><br><span class="line">  choiceStatus: function (e) &#123;</span><br><span class="line">    var that &#x3D; this;</span><br><span class="line">    var code &#x3D; e.currentTarget.id;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      isChecked: code</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><strong>是不是很简单啊！！希望看到的大神，能给出更好的实现方法！！！     老师说过：好东西要拿出来大家分享一下哦！！哈哈。。。。。。</strong></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>h5列表页面回到顶部+分页</title>
    <url>/2020/08/19/h5%E5%88%97%E8%A1%A8%E9%A1%B5%E9%9D%A2%20%E5%9B%9E%E5%88%B0%E9%A1%B6%E9%83%A8%E4%BB%A5%E5%8F%8A%E5%88%86%E9%A1%B5%E6%98%BE%E7%A4%BA/</url>
    <content><![CDATA[<p><strong>用法：</strong>      </p>
<ol>
<li>引入此插件前请先引入zepto.min.js 或 jquery.js</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;zepto.min.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>2.使用插件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> page_instance = $(<span class="string">&#x27;#your-gotop-dom-id&#x27;</span>).pageination(&#123;</span><br><span class="line">    <span class="comment">//  是否一直显示</span></span><br><span class="line">    always: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//   分页开始时的高度，达到高度时才显示分页，如果always未true，则一直显示</span></span><br><span class="line">    startPos: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// 步进高度，每滚动这个高度当前页码加减 1</span></span><br><span class="line">    stepHeight: <span class="number">700</span>,</span><br><span class="line">    <span class="comment">// 总页数，必传</span></span><br><span class="line">    total: <span class="number">5</span>，</span><br><span class="line">    <span class="comment">// 分页图标变成回到顶部图标的时间，当前页为第一页时，回到顶部图标从显示到消失时间</span></span><br><span class="line">    time: <span class="number">1000</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ul>
<li>page_instance 实例，对象，包含你传的参数，作用的dom对象以及两个函数：</li>
<li>updateTotal：变更总页码</li>
<li>updateCul：变更当前页码</li>
</ul>
]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
  <entry>
    <title>hexo next 为文章添加分类</title>
    <url>/2019/12/24/hexo%20next%20%E4%B8%BA%E6%96%87%E7%AB%A0%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="hexo-next-为文章添加分类"><a href="#hexo-next-为文章添加分类" class="headerlink" title="hexo next 为文章添加分类"></a>hexo next 为文章添加分类</h2><p>1.新建一个页面，命名为 categories 。命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>
<p>2.编辑刚新建的页面，将页面的类型设置为categories，主题将自动为这个页面显示所有分类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &quot;分类&quot;</span><br><span class="line">date: 2019-01-18 16:19:42</span><br><span class="line">type: &#39;categories&#39;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>3.在菜单中添加链接。编辑主题的 _config.yml ，将 menu 中的 categories: /categories 注释去掉，如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home &#x2F;&#x2F;主页</span><br><span class="line">  #about: &#x2F;about&#x2F; || user &#x2F;&#x2F;关于</span><br><span class="line">  #tags: &#x2F;tags&#x2F; || tags   &#x2F;&#x2F;标签</span><br><span class="line">  categories: &#x2F;categories&#x2F; || th  &#x2F;&#x2F;分类</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive  &#x2F;&#x2F;归档</span><br></pre></td></tr></table></figure>
<p><strong>添加文章分类关联</strong><br>1.hexo中有Front-matter这个概念，是文件最上方以 — 分隔的区域，用于指定个别文件的变量。举个栗子，在hexo new post article时会生成article.md文件，文件生成好的文章属性。<br>2.在其中添加categories属性，再部署之后就可以在分类页看到分类了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo next 为文章添加分类</span><br><span class="line">categories: 前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>自定义js方法组件</title>
    <url>/2020/08/19/js%E5%B0%81%E8%A3%85%E7%9A%84%E5%85%AC%E5%85%B1%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="常用的公共方法"><a href="#常用的公共方法" class="headerlink" title="常用的公共方法"></a>常用的公共方法</h2><p><strong>//删除数组中指定元素</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeByValue</span>(<span class="params">arr,val</span>)</span>&#123;    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.length;i++)&#123;    </span><br><span class="line">        <span class="keyword">if</span>(arr[i] == val)&#123;</span><br><span class="line">            arr.splice(i,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>时分秒倒计时</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxtime = <span class="number">5</span>* <span class="number">60</span>; <span class="comment">//一个小时，按秒计算，自己调整!   </span></span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">CountDown</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (maxtime &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    minutes = <span class="built_in">Math</span>.floor(maxtime / <span class="number">60</span>);</span><br><span class="line">                    seconds = <span class="built_in">Math</span>.floor(maxtime % <span class="number">60</span>);</span><br><span class="line">                    msg = <span class="string">&quot;距离结束还有&quot;</span> + minutes + <span class="string">&quot;分&quot;</span> + seconds + <span class="string">&quot;秒&quot;</span>;</span><br><span class="line">                    <span class="built_in">document</span>.all[<span class="string">&quot;timer&quot;</span>].innerHTML = msg;</span><br><span class="line">                    <span class="keyword">if</span> (maxtime == <span class="number">5</span> * <span class="number">60</span>)alert(<span class="string">&quot;还剩5分钟&quot;</span>);</span><br><span class="line">                        --maxtime;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">                    clearTimeOut(timer);</span><br><span class="line">                    alert(<span class="string">&quot;时间到，结束!&quot;</span>);</span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        CountDown();</span><br><span class="line">                    &#125;,<span class="number">1000</span>)</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            timer = <span class="built_in">setInterval</span>(<span class="string">&quot;CountDown()&quot;</span>, <span class="number">1000</span>); </span><br><span class="line"> <span class="comment">//60秒倒计时</span></span><br><span class="line"> <span class="keyword">var</span> time = <span class="number">60</span>;<span class="comment">// 倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getRandomCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (time === <span class="number">0</span>) &#123;</span><br><span class="line">            time = <span class="number">60</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            time--;</span><br><span class="line">            $(<span class="string">&#x27;#second&#x27;</span>).text(time);</span><br><span class="line">              <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                getRandomCode();</span><br><span class="line">             &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">getRandomCode();</span><br></pre></td></tr></table></figure>
<p><strong>判断移动端是android 还是ios</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> u = navigator.userAgent;</span><br><span class="line"><span class="keyword">var</span> isAndroid = u.indexOf(<span class="string">&#x27;Android&#x27;</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">&#x27;Adr&#x27;</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">var</span> isiOS = !! u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>);</span><br><span class="line"><span class="keyword">if</span> (isAndroid) &#123;</span><br><span class="line">    alert(<span class="string">&quot;android&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isiOS) &#123;</span><br><span class="line">    alert(<span class="string">&quot;ios&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>//千位分隔符’,’</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thousandBitSeparator</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> decimal = num.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">1</span>] || <span class="string">&#x27;&#x27;</span>;<span class="comment">//小数部分        </span></span><br><span class="line">    <span class="keyword">var</span> tempArr = [];</span><br><span class="line">    <span class="keyword">var</span> revNumArr = num.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>].split(<span class="string">&quot;&quot;</span>).reverse();<span class="comment">//倒序</span></span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> revNumArr) &#123;</span><br><span class="line">          tempArr.push(revNumArr[i]);</span><br><span class="line">          <span class="keyword">if</span> ((i + <span class="number">1</span>) % <span class="number">3</span> === <span class="number">0</span> &amp;&amp; i != revNumArr.length - <span class="number">1</span>) &#123;</span><br><span class="line">            tempArr.push(<span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> zs = tempArr.reverse().join(<span class="string">&#x27;&#x27;</span>);<span class="comment">//整数部分</span></span><br><span class="line">    <span class="keyword">return</span> decimal ? zs + <span class="string">&#x27;.&#x27;</span> + decimal : zs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>//根据屏幕宽度设置<HTML>元素的font-size值，用于rem单位</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> setHtmlFontSize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> clientWidth = <span class="built_in">document</span>.body.clientWidth;</span><br><span class="line">        <span class="keyword">if</span> (clientWidth &gt;= <span class="number">640</span>) &#123;</span><br><span class="line">            $(<span class="string">&#x27;html&#x27;</span>).css(<span class="string">&#x27;font-size&#x27;</span>, <span class="string">&#x27;100px&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> fontSize = <span class="number">100</span> * (clientWidth / <span class="number">640</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            $(<span class="string">&#x27;html&#x27;</span>).css(<span class="string">&#x27;font-size&#x27;</span>, fontSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<p><strong>//判断jquery对象是否有某个className</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> isExistElementClassName = <span class="function"><span class="keyword">function</span>(<span class="params">e, className</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e) &#123;</span><br><span class="line">            <span class="keyword">var</span> cls = e.attr(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (cls) &#123;</span><br><span class="line">                <span class="keyword">var</span> spanClasses = cls.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; spanClasses.length; i++) &#123;</span><br><span class="line">                    spanClasses[i] = $.trim(spanClasses[i]);</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> ($.inArray(className, spanClasses) &gt; <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<p><strong>数字转整数 如 100000 转为10万</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 数字转整数 如 100000 转为10万</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param <span class="type">&#123;需要转化的数&#125;</span> </span>num </span></span><br><span class="line"><span class="comment">         * </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tranNumber</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> numStr = num.toString()</span><br><span class="line">  <span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="regexp">/^(-|\+)?\d+$/</span>); <span class="comment">//是否是整型</span></span><br><span class="line">  <span class="keyword">var</span> isBool = re.test(numStr);</span><br><span class="line">  <span class="keyword">if</span> (isBool) &#123;</span><br><span class="line">    <span class="keyword">if</span> (numStr.length &lt; <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> numStr + <span class="string">&#x27;.00&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 大于4位数是万 (以1W分割 1W以下全部显示)</span></span><br><span class="line">    <span class="keyword">if</span> (numStr.length &gt; <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseFloat</span>(num / <span class="number">10000</span>) + <span class="string">&#x27;万&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 大于8位数是亿</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (numStr.length &gt; <span class="number">8</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">parseFloat</span>(num / <span class="number">100000000</span>) + <span class="string">&#x27;亿&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">parseFloat</span>(num);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>//JS无法进行精确计算的bug    //解决方案的原理是，将浮点数乘以（扩大）10的n次方倍，把浮点数变为整数后再进行相应的运算，最后将得到的结果除以（缩小）10的n次方倍。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">floatAdd</span>(<span class="params">arg1,arg2</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r1,r2,m;</span><br><span class="line">        <span class="keyword">try</span>&#123;r1=arg1.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;r1=<span class="number">0</span>&#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;r2=arg2.toString().split(<span class="string">&quot;.&quot;</span>)[<span class="number">1</span>].length&#125;<span class="keyword">catch</span>(e)&#123;r2=<span class="number">0</span>&#125;</span><br><span class="line">        m=<span class="built_in">Math</span>.pow(<span class="number">10</span>,<span class="built_in">Math</span>.max(r1,r2));</span><br><span class="line">        <span class="keyword">return</span> (arg1*m+arg2*m)/m;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>*<em>js手机号中间四位变成</em>号<br>可以利用substr() 方法可在字符串中抽取从 start 下标开始的指定数目的字符。**</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">&#x27;1366668888&#x27;</span>;   </span><br><span class="line"><span class="keyword">var</span> str2 = str.substr(<span class="number">0</span>,<span class="number">3</span>)+<span class="string">&quot;****&quot;</span>+str.substr(<span class="number">7</span>);   </span><br><span class="line">alert(str2)</span><br><span class="line">语法介绍：</span><br><span class="line">    返回值</span><br><span class="line">    一个新的字符串，包含从 stringObject 的 start（包括 start 所指的字符） 处开始的 length 个字符。如果没有指定 length，那么返回的字符串包含从 start 到 stringObject 的结尾的字符。stringObject.substr(start,length)</span><br></pre></td></tr></table></figure>
<p><strong>解决–H5开发android软键盘将底部布局顶上去</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oHeight = <span class="built_in">document</span>.documentElement.clientHeight;</span><br><span class="line">    $(<span class="built_in">window</span>).resize(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//ios软键盘弹出不会触发resize事件</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.clientHeight &lt; oHeight)&#123;</span><br><span class="line">            $(<span class="string">&quot;#footer&quot;</span>).css(<span class="string">&quot;position&quot;</span>,<span class="string">&quot;static&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#footer&quot;</span>).css(<span class="string">&quot;position&quot;</span>,<span class="string">&quot;absolute&quot;</span>); <span class="comment">//adsolute或fixed，看你布局</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（四）–页面带参传值、JSON数据传递</title>
    <url>/2020/08/19/pagePass/</url>
    <content><![CDATA[<h2 id="小程序实践（四）–页面带参传值、JSON数据传递"><a href="#小程序实践（四）–页面带参传值、JSON数据传递" class="headerlink" title="小程序实践（四）–页面带参传值、JSON数据传递"></a>小程序实践（四）–页面带参传值、JSON数据传递</h2><p>今天呢写了一个（物流跟踪）列子，将通过这个例子来向大家介绍一下小程序是如何带参跳转、JSON数组的传递与解析。先看下效果图：<br><img src="../images/xcx_1.gif" alt="在这里插入图片描述"><br>让我们来看一下本次案例中运用到的函数<br>1）页面跳转的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">      url: &#39;..&#x2F;logistics&#x2F;logistics?dataList&#x3D;&#39; + dataList,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2）我们在参数传递的时候数据中可能会有一些特殊字符，例如 ;/? : @ &amp;=+$,#所以我们需要用函数将其进行编码，也就是下面所说的两个函数　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encodeURIComponent ();  &#x2F;&#x2F;函数把字符串编码为 URI 组件。有了编码自然也会有相对的解码函数</span><br><span class="line"></span><br><span class="line">decodeURIComponent();&#x2F;&#x2F;函数可把字符串作为 URI 组件进行解码。</span><br></pre></td></tr></table></figure>
<p>3）在传递json的时候，我们需要将其转换为字符串传值，而接收的时候我们需要将json转换为对象接收，那就用到了下面的两个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.stringify();&#x2F;&#x2F;将json转成字符串传值</span><br><span class="line">JSON.parse();&#x2F;&#x2F;将字符串转成对象接收 </span><br></pre></td></tr></table></figure>
<p>4)我们接收解析好的JSON如何展示在页面中呢，小程序中一般多用setData方法改变页面信息或者是刷新之后与后台交互获取最新信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setData(&#123;</span><br><span class="line">    参数：值</span><br><span class="line">&#125;)   </span><br></pre></td></tr></table></figure>
<p>以上就是这次案例所用到的函数及方法，最后附上代码，便于大家参考：<br>一级页面传参：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view bindtap&#x3D;&#39;logisiticsGZFn&#39; class&#x3D;&quot;logisi&quot;&gt;查看物流&lt;&#x2F;view&gt;   </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**查看物流 *&#x2F;</span><br><span class="line">  logisiticsGZFn: function(e) &#123;</span><br><span class="line">    var Traces&#x3D; [&#123;&#x2F;&#x2F;JSON模拟数据，项目中可以换取真实的</span><br><span class="line">      &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 08:05:37&quot;,</span><br><span class="line">      &quot;context&quot;: &quot;正在派件..(派件人:邓裕富,电话:18718866310)[深圳 市]&quot;,</span><br><span class="line">      &quot;Remark&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 04:01:28&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;快件在 深圳集散中心 ,准备送往下一站 深圳 [深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 01:41:06&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;快件在 深圳集散中心 [深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;24 20:18:58&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;已收件[深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;24 20:55:28&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;快件在 深圳 ,准备送往下一站 深圳集散中心 [深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 10:23:03&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;派件已签收[深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 10:23:03&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;签收人是：已签收[深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    var dataList&#x3D;encodeURIComponent(JSON.stringify(Traces));&#x2F;&#x2F;函数可把字符串作为 URI 组件进行编码</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &#39;..&#x2F;logistics&#x2F;logistics?dataList&#x3D;&#39; + dataList,&#x2F;&#x2F;传递参数</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>二级页面接收展示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&#39;page_row top&#39;&gt;</span><br><span class="line">  &lt;image class&#x3D;&quot;goods&quot; src&#x3D;&#39;..&#x2F;images&#x2F;sf.jpg&#39;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">  &lt;view class&#x3D;&#39;page_clu logistics&#39;&gt;</span><br><span class="line">    &lt;text&gt;物流公司: 顺丰速运&#123;&#123;wuliuType&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;text&gt;物流单号:221009887344 &#123;&#123;wl_dh&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;text&gt;官方电话:95338 &#123;&#123;wl_phone&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&#39;br&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;middle&quot;&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;top_sh&quot; hidden&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;top_icon&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;text class&#x3D;&quot;address&quot;&gt;[收货地址]&#123;&#123;userAddress&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;on&#39; style&#x3D;&quot;border-left:1px dashed #d0d0d0;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;block wx:for&#x3D;&quot;&#123;&#123;Traces&#125;&#125;&quot; wx:key&#x3D;&quot;index&quot; hidden&#x3D;&quot;&#123;&#123;isShowWl&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;order&#39;&gt;</span><br><span class="line">      &lt;text class&#x3D;&quot;time&quot;&gt;&#123;&#123;item.time&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;icon &#123;&#123;0&#x3D;&#x3D;index?&quot;in&quot;:&quot;no_in&quot;&#125;&#125;&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;logistics_centent page_clu&#39;&gt;</span><br><span class="line">        &lt;text&gt; &#123;&#123;item.context&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">      &lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view wx:if&#x3D;&quot;&#123;&#123;index&#x3D;&#x3D;Traces.length-1&#125;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view wx:else class&#x3D;&#39;on&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;block&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面加载</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onLoad: function(options) &#123;</span><br><span class="line">      var dataTemp &#x3D; decodeURIComponent(options.dataList);&#x2F;&#x2F;函数可把字符串作为 URI 组件进行解码。</span><br><span class="line">      var Traces &#x3D; JSON.parse(dataTemp);&#x2F;&#x2F;航一页传过来的json字符串转化成json数组  物流信息进度</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        Traces: Traces</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>以上便是案例完整的代码，粘贴复制即用。最后说一下，所有的页面获取的数据都需要在onLoad()方法中执行。</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>前端优化–图片懒加载</title>
    <url>/2020/08/19/lazyLoad/</url>
    <content><![CDATA[<h2 id="前端优化–图片懒加载"><a href="#前端优化–图片懒加载" class="headerlink" title="前端优化–图片懒加载##"></a><strong>前端优化–图片懒加载</strong>##</h2><p><strong>一、什么事懒加载</strong><br>    懒加载技术(简称lazyload)是对网页性能优化的一种方案。lazyload的核心是按需加载，避免网页打开时加载过多资源，让用户等待太久，在适当的时候加载用户需要的资源(这里用户需要的资源指该资源呈现在浏览器可视区域)。这里我们主要是对img标签使用懒加载技术，使用jquery的query.lazyload.js库实现。<br>    通俗的讲就是：当访问一个页面的时候，先把img元素或是其他元素的背景图片路径替换成一张大小为1*1px图片的路径（这样就只需请求一次），只有当图片出现在浏览器的可视区域内时，才设置图片真正的路径，让图片显示出来。这就是图片懒加载。<br><strong>二、为何要是用懒加载技术？</strong><br>    比如一个页面中有很多图片，如淘宝、京东首页等等，如果一上来就发送这么多请求，页面加载就会很漫长，如果js文件都放在了文档的底部，恰巧页面的头部又依赖这个js文件，那就不好办了。更为要命的是：一上来就发送百八十个请求，服务器可能就吃不消了（又不是只有一两个人在访问这个页面）。因此优点就很明显了：不仅可以减轻服务器的压力，而且可以让加载好的页面更快地呈现在用户面前（用户体验好）。<br><strong>三、如何实现</strong><br>主要有以下2个关键点：<br>       1、页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片（也就没有请求咯，也就提高性能咯），一旦通过javascript设置了图片路径，浏览器才会送请求。有点按需分配的意思，你不想看，就不给你看，你想看了就给你看    　2、怎么获取真正的路径，这个简单，现在真正的路径存在元素的“data-original（这个名字起个自己认识好记的就行）属性里，要用的时候就取出来，再设置；　       </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步，引入懒加载所需的js文件</span><br><span class="line">&lt;script src&#x3D;&quot;jquery.lazyload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">第二步，img标签的属性如下：</span><br><span class="line">&lt;img class&#x3D;&quot;lazy&quot; data-original&#x3D;&quot;img&#x2F;example.jpg&quot; width&#x3D;&quot;640&quot; height&#x3D;&quot;480&quot;&gt;</span><br><span class="line">第三步，在对应的js文件中，对img标签调用如下imgLazyLoad方法.</span><br></pre></td></tr></table></figure>


<p><strong>四、懒加载方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function imgLazyLoad(param,$dom)&#123;  </span><br><span class="line">      var placeholder &#x3D; baseUrl + &#39;&#x2F;lar-ui&#x2F;imgs&#x2F;placeholder&#x2F;0.png&#39;;   </span><br><span class="line">      var extendParam &#x3D; $.extend(&#123;effect: &#39;fadeIn&#39;,placeholder: placeholder&#125;, param);    </span><br><span class="line">      if($dom)&#123;      </span><br><span class="line">        $($dom).find(&#39;img.lazy&#39;).lazyload(extendParam);   </span><br><span class="line">      &#125;else&#123;       </span><br><span class="line">       $(&#39;img.lazy&#39;).lazyload(extendParam);    </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数说明：<br>    1)$dom为实施懒加载的dom元素，param对象中的参数含义如下　　<br>    2)Placeholder : “img/grey.gif”, //用图片提前占位。　　<br>    3)threshold : 200, //提前开始加载。值为数字，代表的页面高度。目的在于加载图片时可以做到不让用户察觉。　　<br>    4)event : “click”, //事件触发时才加载，值有click,mouseover,foobar等，可以像这样触发：find(‘img.lazy’).trigger(‘foobar’)。　　<br>    5)effect : “fadeIn” ,//载入使用何种效果,effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等。　　<br>    6)container: $(“#container”)//容器内水平滚动效果,滚动时按需加载。Lazyload默认是在拉动浏览器滚动条的时候生效，这个参数还可以让你在拉动某个DIV的滚动条时依次加载其中图片　　<br>    7)failurelimit:图片排序混乱时,值为数字，lazyload默认在找到第一张不在可视区域里的图片时则不在继续加载，如果当HTML容器里混乱的时候有可能会出现可见区域内的图片加载不出来的情况，failurelimit意在加载N张可见区域外的图片，避免出现这个问题。<br><strong>五、方法调用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imgLazyLoad(    </span><br><span class="line">    &#123;effect:&#39;show&#39;&#125;,&#x2F;&#x2F;载入时的效果</span><br><span class="line">    $(&#39;#myCarousel&#39;)&#x2F;&#x2F;获取需要实施懒加载的DOM元素</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>react搭配amazeui环境搭建</title>
    <url>/2020/08/19/reactAmazeui/</url>
    <content><![CDATA[<h2 id="react搭配amazeui环境搭建"><a href="#react搭配amazeui环境搭建" class="headerlink" title="react搭配amazeui环境搭建"></a>react搭配amazeui环境搭建</h2><p>1、<strong>安装node</strong><br><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>查看node   npm版本</p>
<p><img src="../images/1.jpg" alt="Alt text"><br>2、<strong>安装react</strong><br>创建新的react单页面应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、npm install  -g create-react-app</span><br></pre></td></tr></table></figure>
<p><img src="../images/2.jpg" alt="Alt text"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2、create-react-app  react-demo</span><br></pre></td></tr></table></figure>
<p><img src="../images/3.png" alt="Alt text"><br>3、<strong>安装 amazeui</strong>    </p>
<p>1)首先 cd react-demo进入到刚创建的 项目之中<br><img src="../images/4.png" alt="Alt text"><br>2)接下来 可以执行安装: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install amazeui</span><br></pre></td></tr></table></figure>
<p><img src="../images/5.png" alt="Alt text"><br><strong>4、安装amazeui 所需引用的react组件</strong><br><img src="../images/6.png" alt="Alt text"><br><strong>5 页面配置</strong><br><img src="../images/7.png" alt="Alt text"><br><strong>6、组件的引用</strong><br><img src="../images/8.png" alt="Alt text"><br><strong>7、运行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- more --&gt;运行 npm start</span><br></pre></td></tr></table></figure>
<p><strong>效果图（简单的按钮 展示）</strong><br><img src="../images/9.png" alt="Alt text"><br><strong>Amazeui组件</strong><br>Web组件基于 React.js 封装的 Web 组件，在 React 中，一切皆组件，无论是展示性的，还是带有交互功能的，都是组件；所有组件都是使用 JS 编写、渲染。</p>
<p>Amaze UI React 组件分为一下几个类型：</p>
<ul>
<li><strong>布局相关</strong>：用于布局的组件，如网格等；</li>
<li><strong>HTML 元素</strong>：文本域、按钮、表格等 HTML 元素增强封装；</li>
<li><strong>导航相关：</strong>用于导航的组件；</li>
<li><strong>常用相关</strong>：其他常用的组件，如图标等；</li>
<li><strong>交互组件</strong>：带交互功能的组件，如模态窗口等；</li>
<li><strong>移动组件</strong>：针对移动端设计的组件。</li>
</ul>
]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（二）--swiper轮播图组件</title>
    <url>/2020/08/19/xcxPicRange/</url>
    <content><![CDATA[<h2 id="小程序实践（二）–swiper轮播图组件"><a href="#小程序实践（二）–swiper轮播图组件" class="headerlink" title="小程序实践（二）–swiper轮播图组件"></a>小程序实践（二）–swiper轮播图组件</h2><p>依照惯例，先看效果图：<a id="more"></a><br><img src="../images/xcx_1.gif" alt="效果图"><br>先了解下swiper组件参数配置<br><img src="../images/xcx_2.png" alt="swiper组件参数xcx_2"><br><strong>轮播实现的具体步骤如下：</strong><br>  <strong>第一步：添加图片素材，我这边是放到images下，文件以及图片名字自定义即可。</strong><br>  <img src="../images/xcx_3.png" alt="图片素材文件路径xcx_3"><br>  <strong>第二步：在wxml中进行页面布局</strong><br>  在这里呢，用到了<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html">列表渲染</a> 、 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">swiper组件</a>，三元运算符（注：由于小程序不能操作dom，三元运算符还有一个常用的使用场景是控件class样式输出，达到jQuery.addClass()的效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">  &lt;swiper autoplay&#x3D;&quot;auto&quot; interval&#x3D;&quot;5000&quot; duration&#x3D;&quot;500&quot; current&#x3D;&quot;&#123;&#123;swiperCurrent&#125;&#125;&quot; bindchange&#x3D;&quot;swiperChange&quot; class&#x3D;&quot;swiper&quot;&gt;</span><br><span class="line">    &lt;block wx:for&#x3D;&quot;&#123;&#123;slider&#125;&#125;&quot; wx:key&#x3D;&quot;unique&quot;&gt;</span><br><span class="line">      &lt;swiper-item&gt;</span><br><span class="line">        &lt;image src&#x3D;&quot;&#123;&#123;item.picUrl&#125;&#125;&quot; class&#x3D;&quot;img&quot; data-index&#x3D;&quot;&#123;&#123;index&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">      &lt;&#x2F;swiper-item&gt;</span><br><span class="line">    &lt;&#x2F;block&gt;</span><br><span class="line">  &lt;&#x2F;swiper&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;dots&quot;&gt;</span><br><span class="line">    &lt;block wx:for&#x3D;&quot;&#123;&#123;slider&#125;&#125;&quot; wx:key&#x3D;&quot;unique&quot;&gt;</span><br><span class="line">      &lt;view class&#x3D;&quot;dot &#123;&#123;index &#x3D;&#x3D; swiperCurrent ? &#39; active&#39; : &#39;&#39;&#125;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;block&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>第三步：在js中创建图片列表，以便于进入页面的时候就会渲染图片。</strong>　　　　　<br>　红色标注为，swiperChange方法中传入的参数用于三木运算符控制轮播图下面的圆点样式。
　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   *&#x2F;</span><br><span class="line">  data: &#123;</span><br><span class="line">    slider:[</span><br><span class="line">      &#123;picUrl:&#39;..&#x2F;images&#x2F;1.jpg&#39;&#125;,</span><br><span class="line">      &#123; picUrl: &#39;..&#x2F;images&#x2F;2.jpg&#39; &#125;,</span><br><span class="line">      &#123; picUrl: &#39;..&#x2F;images&#x2F;3.jpg&#39; &#125;</span><br><span class="line">    ],</span><br><span class="line">    swiperCurrent:0,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;轮播 组件控制</span><br><span class="line">  swiperChange:function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      swiperCurrent:e.detail.current</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>react搭配amazeui环境搭建</title>
    <url>/2020/08/19/react%E6%90%AD%E9%85%8Damazeui%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h2 id="react搭配amazeui环境搭建"><a href="#react搭配amazeui环境搭建" class="headerlink" title="react搭配amazeui环境搭建"></a>react搭配amazeui环境搭建</h2><p>1、<strong>安装node</strong><br><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br>查看node   npm版本<br><img src="https://img-blog.csdnimg.cn/20200117101738492.jpg" alt="在这里插入图片描述"><br>2、<strong>安装react</strong><a id="more"></a><br>创建新的react单页面应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1、npm install  -g create-react-app</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200117101757160.jpg" alt="在这里插入图片描述"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2、create-react-app  react-demo</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200117101810285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3、<strong>安装 amazeui</strong>    </p>
<p>1)首先 cd react-demo进入到刚创建的 项目之中<br><img src="https://img-blog.csdnimg.cn/20200117101831305.png" alt="在这里插入图片描述"><br>2)接下来 可以执行安装: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install amazeui</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200117101846919.png" alt="在这里插入图片描述"><br><strong>4、安装amazeui 所需引用的react组件</strong><br><img src="https://img-blog.csdnimg.cn/20200117101853972.png" alt="在这里插入图片描述"><br><strong>5 页面配置</strong><br><img src="https://img-blog.csdnimg.cn/20200117101912517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>6、组件的引用</strong><br><img src="https://img-blog.csdnimg.cn/20200117101928782.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>7、运行</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">运行 npm start</span><br></pre></td></tr></table></figure>
<p><strong>效果图（简单的按钮 展示）</strong><br><img src="https://img-blog.csdnimg.cn/20200117101938874.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>Amazeui组件</strong><br>Web组件基于 React.js 封装的 Web 组件，在 React 中，一切皆组件，无论是展示性的，还是带有交互功能的，都是组件；所有组件都是使用 JS 编写、渲染。</p>
<p>Amaze UI React 组件分为一下几个类型：</p>
<ul>
<li><strong>布局相关</strong>：用于布局的组件，如网格等；</li>
<li><strong>HTML 元素</strong>：文本域、按钮、表格等 HTML 元素增强封装；</li>
<li><strong>导航相关：</strong>用于导航的组件；</li>
<li><strong>常用相关</strong>：其他常用的组件，如图标等；</li>
<li><strong>交互组件</strong>：带交互功能的组件，如模态窗口等；</li>
<li><strong>移动组件</strong>：针对移动端设计的组件。</li>
</ul>
]]></content>
      <categories>
        <category>前端-React</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（一）--首页tab选项实现</title>
    <url>/2020/08/19/xcx_tabBar/</url>
    <content><![CDATA[<h2 id="小程序实践（一）–首页tab选项实现"><a href="#小程序实践（一）–首页tab选项实现" class="headerlink" title="小程序实践（一）–首页tab选项实现"></a>小程序实践（一）–首页tab选项实现<a id="more"></a></h2><p><strong>先看下效果图：</strong><br><img src="../images/xcx1.gif" alt="效果图xcx1"><br><strong>底部tab切换的实现主要在App.json中的 tabBar列表。如下图所示：</strong></p>
<p><img src="../images/xcx_2.png" alt="app.json配置文件xcx_2"><br><strong>接下来详细介绍一下App.json中的参数</strong><br>1.默认情况下主要分为Pages和window两个模块，tabBar是我们在需要的时候添加进去的<br>2.pages–我们开发中所写的页面路径都需要引用在这里<br>3.windows–设置小程序的状态栏、导航条、标题、窗口背景色，详细如下：</p>
<p><img src="../images/xcx_3.png" alt="windows参数配置xcx_3"><br><strong>4.tabBar 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。可查看官方API文档 tabBar</strong>　<br>　属性说明：<br>　<img src="../images/xcx_4.png" alt="tabBarc参数配置xcx_4"><br>其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：<br>　<img src="../images/xcx_5.png" alt="list数组对象参数xcx_5"><br><strong>最后我们来看下底部tabBar功能的具体实现<br>　一、首先我们先创建两个自己所需要的页面，页面结构分为js、json、wxml以及wxss四部分组成　　js:处理页面逻辑性问题；json:顶部导航名称命名-navigationBarTitleText；wxml:布局页面结构；wxss:也就是所谓的样式css<br>　二、创建一个存放图片的文件夹，一般都命名为images<br>　三、需要在app.json中配置tabBar，详细的配置参数说明，在上面已经说明。进行配置就可以了。<br>　四、项目目录结构</strong><br>　<img src="../images/xcx_6.png" alt="xcx_6项目目录结构"><br>　<strong>五、附上最终代码：</strong>
　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[   </span><br><span class="line">    &quot;pages&#x2F;home&#x2F;home&quot;,</span><br><span class="line">    &quot;pages&#x2F;myself&#x2F;myself&quot;,</span><br><span class="line">    &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">    &quot;pages&#x2F;logs&#x2F;logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#000000&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;首页table实践&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;white&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;list&quot;: [&#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;home&#x2F;home&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages&#x2F;images&#x2F;home_u.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages&#x2F;images&#x2F;home.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;myself&#x2F;myself&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;我的&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages&#x2F;images&#x2F;my_u.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages&#x2F;images&#x2F;my.png&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>前端优化–图片懒加载</title>
    <url>/2020/08/19/%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E2%80%93%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
    <content><![CDATA[<h2 id="前端优化–图片懒加载"><a href="#前端优化–图片懒加载" class="headerlink" title="前端优化–图片懒加载##"></a><strong>前端优化–图片懒加载</strong>##</h2><p><strong>一、什么事懒加载</strong><br>    懒加载技术(简称lazyload)是对网页性能优化的一种方案。lazyload的核心是按需加载，避免网页打开时加载过多资源，让用户等待太久，在适当的时候加载用户需要的资源(这里用户需要的资源指该资源呈现在浏览器可视区域)。这里我们主要是对img标签使用懒加载技术，使用jquery的query.lazyload.js库实现。<br>    通俗的讲就是<a id="more"></a> ：当访问一个页面的时候，先把img元素或是其他元素的背景图片路径替换成一张大小为1*1px图片的路径（这样就只需请求一次），只有当图片出现在浏览器的可视区域内时，才设置图片真正的路径，让图片显示出来。这就是图片懒加载。<br><strong>二、为何要是用懒加载技术？</strong><br>    比如一个页面中有很多图片，如淘宝、京东首页等等，如果一上来就发送这么多请求，页面加载就会很漫长，如果js文件都放在了文档的底部，恰巧页面的头部又依赖这个js文件，那就不好办了。更为要命的是：一上来就发送百八十个请求，服务器可能就吃不消了（又不是只有一两个人在访问这个页面）。因此优点就很明显了：不仅可以减轻服务器的压力，而且可以让加载好的页面更快地呈现在用户面前（用户体验好）。<br><strong>三、如何实现</strong><br>主要有以下2个关键点：<br>       1、页面中的img元素，如果没有src属性，浏览器就不会发出请求去下载图片（也就没有请求咯，也就提高性能咯），一旦通过javascript设置了图片路径，浏览器才会送请求。有点按需分配的意思，你不想看，就不给你看，你想看了就给你看    　2、怎么获取真正的路径，这个简单，现在真正的路径存在元素的“data-original（这个名字起个自己认识好记的就行）属性里，要用的时候就取出来，再设置；　       </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第一步，引入懒加载所需的js文件</span><br><span class="line">&lt;script src&#x3D;&quot;jquery.lazyload.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">第二步，img标签的属性如下：</span><br><span class="line">&lt;img class&#x3D;&quot;lazy&quot; data-original&#x3D;&quot;img&#x2F;example.jpg&quot; width&#x3D;&quot;640&quot; height&#x3D;&quot;480&quot;&gt;</span><br><span class="line">第三步，在对应的js文件中，对img标签调用如下imgLazyLoad方法.</span><br></pre></td></tr></table></figure>


<p><strong>四、懒加载方法</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function imgLazyLoad(param,$dom)&#123;  </span><br><span class="line">      var placeholder &#x3D; baseUrl + &#39;&#x2F;lar-ui&#x2F;imgs&#x2F;placeholder&#x2F;0.png&#39;;   </span><br><span class="line">      var extendParam &#x3D; $.extend(&#123;effect: &#39;fadeIn&#39;,placeholder: placeholder&#125;, param);    </span><br><span class="line">      if($dom)&#123;      </span><br><span class="line">        $($dom).find(&#39;img.lazy&#39;).lazyload(extendParam);   </span><br><span class="line">      &#125;else&#123;       </span><br><span class="line">       $(&#39;img.lazy&#39;).lazyload(extendParam);    </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>参数说明：<br>    1)$dom为实施懒加载的dom元素，param对象中的参数含义如下　　<br>    2)Placeholder : “img/grey.gif”, //用图片提前占位。　　<br>    3)threshold : 200, //提前开始加载。值为数字，代表的页面高度。目的在于加载图片时可以做到不让用户察觉。　　<br>    4)event : “click”, //事件触发时才加载，值有click,mouseover,foobar等，可以像这样触发：find(‘img.lazy’).trigger(‘foobar’)。　　<br>    5)effect : “fadeIn” ,//载入使用何种效果,effect(特效),值有show(直接显示),fadeIn(淡入),slideDown(下拉)等。　　<br>    6)container: $(“#container”)//容器内水平滚动效果,滚动时按需加载。Lazyload默认是在拉动浏览器滚动条的时候生效，这个参数还可以让你在拉动某个DIV的滚动条时依次加载其中图片　　<br>    7)failurelimit:图片排序混乱时,值为数字，lazyload默认在找到第一张不在可视区域里的图片时则不在继续加载，如果当HTML容器里混乱的时候有可能会出现可见区域内的图片加载不出来的情况，failurelimit意在加载N张可见区域外的图片，避免出现这个问题。<br><strong>五、方法调用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">imgLazyLoad(    </span><br><span class="line">    &#123;effect:&#39;show&#39;&#125;,&#x2F;&#x2F;载入时的效果</span><br><span class="line">    $(&#39;#myCarousel&#39;)&#x2F;&#x2F;获取需要实施懒加载的DOM元素</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
  <entry>
    <title>原生js实现小游戏--别踩白块</title>
    <url>/2020/08/19/%E5%8E%9F%E7%94%9Fjs%E5%AE%9E%E7%8E%B0%E5%B0%8F%E6%B8%B8%E6%88%8F--%E5%88%AB%E8%B8%A9%E7%99%BD%E5%9D%97/</url>
    <content><![CDATA[<h2 id="原生js实现小游戏–别踩白块"><a href="#原生js实现小游戏–别踩白块" class="headerlink" title="原生js实现小游戏–别踩白块"></a>原生js实现小游戏–别踩白块</h2><p>先看效果图<br>    <img src="https://img-blog.csdnimg.cn/20191204110407957.gif" alt="在这里插入图片描述"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigbox&quot;</span>&gt;</span>       </span><br><span class="line">     <span class="comment">&lt;!-- 显示游戏的区域 --&gt;</span>  </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gamequyu&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 上面显示一个游戏开始的按钮 --&gt;</span>  </span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;start&quot;</span>&gt;</span>游戏开始<span class="tag">&lt;/<span class="name">div</span>&gt;</span>            </span><br><span class="line">          <span class="comment">&lt;!-- 再显示一个游戏的主体部分 --&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zhuti&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>      </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;zhezhaoceng&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span>       </span><br><span class="line">     <span class="comment">&lt;!-- 下面再显示一个计分的盒子 --&gt;</span>       </span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;jifen&quot;</span>&gt;</span>当前分数:0<span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- more --&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先找到主体内容的盒子,添加到这个盒子中去    </span></span><br><span class="line"><span class="keyword">var</span> zhuti = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;zhuti&#x27;</span>)[<span class="number">0</span>];    </span><br><span class="line"><span class="comment">//找到计分 , 每点击一次, 就让分数++;    </span></span><br><span class="line"><span class="keyword">var</span> jifen = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;jifen&#x27;</span>)[<span class="number">0</span>];    </span><br><span class="line"><span class="comment">// 找到游戏开始按钮, 点击让它影藏,结束时显示并把里面的文字改变为&#x27;游戏结束&#x27;    </span></span><br><span class="line"><span class="keyword">var</span> start = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;start&#x27;</span>)[<span class="number">0</span>];    </span><br><span class="line"><span class="comment">// 找到遮罩层, 结束游戏的时候显示    </span></span><br><span class="line"><span class="keyword">var</span> zhezhaoceng = <span class="built_in">document</span>.getElementsByClassName(<span class="string">&#x27;zhezhaoceng&#x27;</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addbox</span>(<span class="params">classname</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 思路:         </span></span><br><span class="line"><span class="comment">// 1: 先封装一个函数动态的创建盒子;        </span></span><br><span class="line"><span class="comment">// 2: 一个盒子里装了四个小盒子;        </span></span><br><span class="line"><span class="comment">// 3: 随机一个数,让这四个小盒子的某一个的颜色改为黑色 ;        </span></span><br><span class="line"><span class="comment">// 4: 给这个小盒子添加类名,设置样式;        </span></span><br><span class="line"><span class="comment">// 5: 随机数作为下标, 给这个随机数的下标的小盒子添加一个类名;        </span></span><br><span class="line"><span class="comment">// 6: 添加到&#x27;zhuti&#x27;里面去,显示在页面上(如果zhuti里面有内容了,就要添加到所有内容的最前面,如果没有,接直接添加)</span></span><br><span class="line"> <span class="comment">// 生成随机数作为四个盒子的下标        </span></span><br><span class="line"> <span class="keyword">var</span> index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">4</span>)        </span><br><span class="line"> <span class="comment">// console.log(index);       </span></span><br><span class="line"> <span class="comment">//创建一个盒子;         </span></span><br><span class="line"> <span class="keyword">var</span> bigdiv = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);       </span><br><span class="line"> bigdiv.className = classname;        </span><br><span class="line"> <span class="comment">// 再依次创建四个小盒子;添加到刚刚创建的大盒子中;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;              </span><br><span class="line">     <span class="keyword">var</span> smallbox = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>)      </span><br><span class="line">     bigdiv.appendChild(smallbox)  </span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">// 判断主体里面有没有盒子 ;         </span></span><br><span class="line"> <span class="comment">// 如果已经存在盒子,就要添加到它们的最前面        </span></span><br><span class="line"> <span class="comment">// 如果没有,就可以直接添加到页面上</span></span><br><span class="line"> <span class="keyword">if</span> (zhuti.children.length == <span class="number">0</span>) &#123;           </span><br><span class="line">      zhuti.appendChild(bigdiv) </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;           </span><br><span class="line">     zhuti.insertBefore(bigdiv, zhuti.children[<span class="number">0</span>])     </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 给随机下标的盒子添加样式的背景色为黑色;       </span></span><br><span class="line">  bigdiv.children[index].style.backgroundColor = <span class="string">&#x27;black&#x27;</span>;        </span><br><span class="line">  <span class="comment">// 再给这个随机的盒子添加一点东西,可以用来做判断        </span></span><br><span class="line">  bigdiv.children[index].className = <span class="string">&#x27;random_box&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//计分与控制速度的函数  </span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">   <span class="comment">// 封装一个计时器移动的方法, 让主体内的内容动起来;        </span></span><br><span class="line">   <span class="comment">// 思路:         </span></span><br><span class="line">   <span class="comment">//      1: 先获取元素的最终样式,距离顶部的top值;            </span></span><br><span class="line">   <span class="comment">//      2: 声明两个变量; 一个用来改变元素距离顶部的top值; 一个用来计分数;  </span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;     </span><br><span class="line">  <span class="keyword">var</span> sudu = <span class="number">5</span>;        </span><br><span class="line">  <span class="comment">// 创建一个计时器让它缓动显示到页面        </span></span><br><span class="line">  <span class="comment">//在样式里面就设置了top值为-150px；        </span></span><br><span class="line">  <span class="comment">//通过计时器让它的top值缓动到页面， 当它的top值等于0的时候，又让它的top值变为-150px；        </span></span><br><span class="line">  <span class="comment">//就调用创建元素的方法再创建一个盒子，让它插在这个显示在页面上的盒子的前面</span></span><br><span class="line">  obj.timeID = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> nowtop = <span class="built_in">parseInt</span>(getComputedStyle(obj)[<span class="string">&#x27;top&#x27;</span>]) + sudu;</span><br><span class="line">      obj.style.top = nowtop + <span class="string">&#x27;px&#x27;</span>;            </span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">parseInt</span>(getComputedStyle(obj)[<span class="string">&#x27;top&#x27;</span>]) &gt;= <span class="number">0</span>)&#123;</span><br><span class="line">        addbox(<span class="string">&#x27;row&#x27;</span>)</span><br><span class="line">        obj.style.top = <span class="number">-150</span> + <span class="string">&#x27;px&#x27;</span>            </span><br><span class="line">      &#125;</span><br><span class="line">  <span class="comment">// 判断条件：在移动的时候，如果用户没有点击到带有颜色的盒子，让盒子超过了界限；就结束游戏；</span></span><br><span class="line">  <span class="keyword">if</span> (obj.children.length == <span class="number">6</span>) &#123;                </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;                  </span><br><span class="line">            <span class="keyword">if</span> (obj.children[obj.children.length - <span class="number">1</span>].children[i].className == <span class="string">&#x27;random_box&#x27;</span>) &#123;</span><br><span class="line">                        </span><br><span class="line">                        jifen.innerHTML = <span class="string">&#x27;当前最高得分:&#x27;</span> + num;                        </span><br><span class="line">                        start.style.display = <span class="string">&#x27;block&#x27;</span>                        </span><br><span class="line">                        start.innerHTML = <span class="string">&#x27;小朋友, 游戏结束&#x27;</span>;                        </span><br><span class="line">                        start.style.display = <span class="string">&#x27;block&#x27;</span>;                        </span><br><span class="line">                        start.style.backgroundColor = <span class="string">&#x27;green&#x27;</span>;                        </span><br><span class="line">                        start.style.height = <span class="number">60</span> + <span class="string">&#x27;px&#x27;</span>;                        </span><br><span class="line">                        start.style.fontSize = <span class="number">30</span> + <span class="string">&#x27;px&#x27;</span>;                        </span><br><span class="line">                        zhezhaoceng.style.display = <span class="string">&#x27;block&#x27;</span>;                        </span><br><span class="line">                        <span class="built_in">clearInterval</span>(obj.timeID)</span><br><span class="line">                    &#125;                </span><br><span class="line">         &#125;                </span><br><span class="line">                    <span class="comment">// 让主体的内容的长度永远等于6,如果不等于6,就会出现按下第一个带&#x27;random_box&#x27;类名的小盒子,之后就不会再回到以上的判断里面了;                </span></span><br><span class="line">                    obj.removeChild(obj.children[obj.children.length - <span class="number">1</span>])            </span><br><span class="line">   &#125;</span><br><span class="line">    <span class="comment">// console.log(obj.children.length)</span></span><br><span class="line">    <span class="comment">// 判断用户点击的时候:条件:如果没有点中指定的盒子(类名为&#x27;random_box&#x27;)的盒子,就结束游戏;不然就计分num++;            </span></span><br><span class="line">    obj.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;                </span><br><span class="line">    <span class="comment">// 根据事件对象里面的事件源来进行判断;                </span></span><br><span class="line">    <span class="comment">//当它的事件源的名字等于&#x27;random_box&#x27;的时候;</span></span><br><span class="line">    <span class="keyword">if</span> (event.target.className == <span class="string">&#x27;random_box&#x27;</span>) &#123;                    </span><br><span class="line">    <span class="comment">// 让这个事件源的的背景色变为红色;                    </span></span><br><span class="line">    event.target.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;                    </span><br><span class="line">    <span class="comment">//当用户点击了事件源时,把他的类名清空, 不然只变了颜色,到了第6个,判断类名还是&#x27;random_box&#x27;时, 就会结束游戏;                    </span></span><br><span class="line">    event.target.className = <span class="string">&#x27;&#x27;</span>;                    </span><br><span class="line">    <span class="comment">// 计分                    </span></span><br><span class="line">    num++;                    </span><br><span class="line">    <span class="comment">// 显示在当前得分的盒子里                    </span></span><br><span class="line">    jifen.innerHTML = <span class="string">&#x27;当前得分&#x27;</span> + num;                </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;                    </span><br><span class="line">    <span class="comment">// 结束游戏                    </span></span><br><span class="line">    <span class="built_in">clearInterval</span>(obj.timeID)                    </span><br><span class="line">    start.style.display = <span class="string">&#x27;block&#x27;</span>;                    </span><br><span class="line">    start.style.backgroundColor = <span class="string">&#x27;green&#x27;</span>;                    </span><br><span class="line">    start.style.height = <span class="number">60</span> + <span class="string">&#x27;px&#x27;</span>;                    </span><br><span class="line">    start.style.fontSize = <span class="number">30</span> + <span class="string">&#x27;px&#x27;</span>;                    </span><br><span class="line">    start.innerHTML = <span class="string">&#x27;游戏结束!再来一局&#x27;</span>;                    </span><br><span class="line">    jifen.innerHTML = <span class="string">&#x27;最终得分&#x27;</span> + num;                    </span><br><span class="line">    <span class="comment">// 让遮罩层显示                    </span></span><br><span class="line">    zhezhaoceng.style.display = <span class="string">&#x27;block&#x27;</span>;                </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 加速(判断分数到了多少时,让主体下降的top值变大)               </span></span><br><span class="line">     <span class="keyword">if</span> (num % <span class="number">5</span> == <span class="number">0</span>) &#123;                    </span><br><span class="line">         sudu++;                        </span><br><span class="line">      &#125;            </span><br><span class="line">     &#125;</span><br><span class="line">        </span><br><span class="line">        &#125;, <span class="number">20</span>)    </span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 当它点击开始按钮的时候,再调用函数;运行起来;    </span></span><br><span class="line">     start.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;        </span><br><span class="line">     <span class="comment">//如果事重新来一局,那就先把页面上已经创建的盒子先清除;        </span></span><br><span class="line">     <span class="keyword">if</span> (zhuti.children.length != <span class="number">0</span>) &#123;            </span><br><span class="line">     zhuti.innerHTML = <span class="string">&#x27;&#x27;</span>        </span><br><span class="line">     &#125;        </span><br><span class="line">     <span class="comment">// 让遮罩层隐藏        </span></span><br><span class="line">     zhezhaoceng.style.display = <span class="string">&#x27;none&#x27;</span>;        </span><br><span class="line">     <span class="comment">// 让开始的按钮影藏         </span></span><br><span class="line">     <span class="built_in">this</span>.style.display = <span class="string">&#x27;none&#x27;</span>;        </span><br><span class="line">     jifen.innerHTML = <span class="string">&#x27;当前得分:0&#x27;</span>        </span><br><span class="line">     move(zhuti)    </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">CSS</span>&gt;</span><br><span class="line"><span class="selector-class">.bigbox</span> &#123;            </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;            </span><br><span class="line">    <span class="attribute">height</span>: auto;            </span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#2d2d2d</span>;            </span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span> auto;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.gamequyu</span> &#123;  </span><br><span class="line">          <span class="attribute">width</span>: <span class="number">100%</span>;            </span><br><span class="line">          <span class="attribute">height</span>: <span class="number">600px</span>;            </span><br><span class="line">          <span class="attribute">position</span>: relative;           </span><br><span class="line">          <span class="attribute">overflow</span>: hidden;           </span><br><span class="line">          <span class="attribute">background-color</span>: <span class="number">#fefefe</span>;           </span><br><span class="line">          <span class="comment">/* background: url(&quot;./dog.png&quot;) no-repeat; */</span>           </span><br><span class="line">          <span class="attribute">background-size</span>: <span class="number">100%</span>;        </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.start</span> &#123;        </span><br><span class="line">     <span class="attribute">position</span>: absolute;            </span><br><span class="line">     <span class="attribute">width</span>: <span class="number">400px</span>;            </span><br><span class="line">     <span class="attribute">height</span>: <span class="number">50px</span>;            </span><br><span class="line">     <span class="attribute">color</span>: white;            </span><br><span class="line">     <span class="attribute">text-align</span>: center;            </span><br><span class="line">     <span class="attribute">line-height</span>: <span class="number">50px</span>;            </span><br><span class="line">     <span class="attribute">background-color</span>: brown;            </span><br><span class="line">     <span class="attribute">font-size</span>: <span class="number">30px</span>;            </span><br><span class="line">     <span class="attribute">cursor</span>: pointer;            </span><br><span class="line">     <span class="attribute">z-index</span>: <span class="number">9999</span>;        </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.zhuti</span> &#123;        </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;            </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>;            </span><br><span class="line">    <span class="attribute">position</span>: absolute;           </span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">150px</span>;       </span><br><span class="line">&#125;</span><br><span class="line"> <span class="selector-class">.jifen</span> &#123;       </span><br><span class="line">       <span class="attribute">width</span>: <span class="number">400px</span>;            </span><br><span class="line">       <span class="attribute">height</span>: <span class="number">50px</span>;           </span><br><span class="line">       <span class="attribute">font-size</span>: <span class="number">30px</span>;            </span><br><span class="line">       <span class="attribute">text-align</span>: center;            </span><br><span class="line">       <span class="attribute">line-height</span>: <span class="number">50px</span>;            </span><br><span class="line">       <span class="attribute">color</span>: white;            </span><br><span class="line">       <span class="attribute">margin</span>: <span class="number">0</span> auto;           </span><br><span class="line">       <span class="attribute">background-color</span>: brown;       </span><br><span class="line"> &#125;</span><br><span class="line"><span class="selector-class">.row</span> &#123;       </span><br><span class="line">        <span class="attribute">width</span>: <span class="number">400px</span>;            </span><br><span class="line">        <span class="attribute">height</span>: <span class="number">150px</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.row</span> <span class="selector-tag">div</span> &#123;      </span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;            </span><br><span class="line">       <span class="attribute">height</span>: <span class="number">150px</span>;            </span><br><span class="line">       <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#343434</span>;            </span><br><span class="line">       <span class="attribute">border-top-width</span>: <span class="number">0</span>;           </span><br><span class="line">        <span class="attribute">border-left-width</span>: <span class="number">0</span>;            </span><br><span class="line">        <span class="attribute">float</span>: left;            </span><br><span class="line">        <span class="attribute">cursor</span>: pointer;            </span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;       </span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.zhezhaoceng</span> &#123;        </span><br><span class="line">     <span class="attribute">width</span>: <span class="number">100%</span>;            </span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100%</span>;            </span><br><span class="line">     <span class="attribute">position</span>: absolute;            </span><br><span class="line">     <span class="attribute">z-index</span>: <span class="number">999</span>;            </span><br><span class="line">     <span class="attribute">display</span>: none;        </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（一）--首页tab选项实现</title>
    <url>/2020/08/19/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%80%EF%BC%89--%E9%A6%96%E9%A1%B5tab%E9%80%89%E9%A1%B9%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h2 id="小程序实践（一）–首页tab选项实现"><a href="#小程序实践（一）–首页tab选项实现" class="headerlink" title="小程序实践（一）–首页tab选项实现"></a>小程序实践（一）–首页tab选项实现</h2><p><strong>先看下效果图：</strong><br><img src="https://img-blog.csdnimg.cn/20200117102548672.gif" alt="在这里插入图片描述"><br><strong>底部tab切换的实现主要在App.json中的 tabBar列表。如下图所示：</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20200117102608596.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>接下来详细介绍一下App.json中的参数</strong><br>1.默认情况下主要分为Pages和window两个模块，tabBar是我们在需要的时候添加进去的<br>2.pages–我们开发中所写的页面路径都需要引用在这里<br>3.windows–设置小程序的状态栏、导航条、标题、窗口背景色，详细如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200117102627935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>4.tabBar 是一个数组，只能配置最少2个、最多5个 tab，tab 按数组的顺序排序。可查看官方API文档 tabBar</strong>　<br>　属性说明：<br><img src="https://img-blog.csdnimg.cn/20200117102638981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中 list 接受一个数组，数组中的每个项都是一个对象，其属性值如下：<br><img src="https://img-blog.csdnimg.cn/20200117102653907.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>最后我们来看下底部tabBar功能的具体实现<br>　一、首先我们先创建两个自己所需要的页面，页面结构分为js、json、wxml以及wxss四部分组成　　js:处理页面逻辑性问题；json:顶部导航名称命名-navigationBarTitleText；wxml:布局页面结构；wxss:也就是所谓的样式css<br>　二、创建一个存放图片的文件夹，一般都命名为images<br>　三、需要在app.json中配置tabBar，详细的配置参数说明，在上面已经说明。进行配置就可以了。<br>　四、项目目录结构</strong><br><img src="https://img-blog.csdnimg.cn/20200117102659552.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>　<strong>五、附上最终代码：</strong>
　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;pages&quot;:[   </span><br><span class="line">    &quot;pages&#x2F;home&#x2F;home&quot;,</span><br><span class="line">    &quot;pages&#x2F;myself&#x2F;myself&quot;,</span><br><span class="line">    &quot;pages&#x2F;index&#x2F;index&quot;,</span><br><span class="line">    &quot;pages&#x2F;logs&#x2F;logs&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;window&quot;:&#123;</span><br><span class="line">    &quot;backgroundTextStyle&quot;:&quot;light&quot;,</span><br><span class="line">    &quot;navigationBarBackgroundColor&quot;: &quot;#000000&quot;,</span><br><span class="line">    &quot;navigationBarTitleText&quot;: &quot;首页table实践&quot;,</span><br><span class="line">    &quot;navigationBarTextStyle&quot;:&quot;white&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;tabBar&quot;: &#123;</span><br><span class="line">    &quot;list&quot;: [&#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;home&#x2F;home&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;首页&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages&#x2F;images&#x2F;home_u.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages&#x2F;images&#x2F;home.png&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;pagePath&quot;: &quot;pages&#x2F;myself&#x2F;myself&quot;,</span><br><span class="line">      &quot;text&quot;: &quot;我的&quot;,</span><br><span class="line">      &quot;iconPath&quot;: &quot;pages&#x2F;images&#x2F;my_u.png&quot;,</span><br><span class="line">      &quot;selectedIconPath&quot;: &quot;pages&#x2F;images&#x2F;my.png&quot;</span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>　</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>如何发布文章到自己搭建的hexo博客上!</title>
    <url>/2020/08/19/%E5%A6%82%E4%BD%95%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%88%B0%E8%87%AA%E5%B7%B1%E6%90%AD%E5%BB%BA%E7%9A%84hexo%E5%8D%9A%E5%AE%A2%E4%B8%8A%EF%BC%81/</url>
    <content><![CDATA[<h2 id="如何发布文章到自己搭建的hexo博客上"><a href="#如何发布文章到自己搭建的hexo博客上" class="headerlink" title="如何发布文章到自己搭建的hexo博客上"></a>如何发布文章到自己搭建的hexo博客上</h2><h2 id="1-选择一个markdown编辑器，我个人觉得csdn自带的md编辑器就挺好用的，你可以注册一个csdn帐号，直接微信扫一扫就可以；"><a href="#1-选择一个markdown编辑器，我个人觉得csdn自带的md编辑器就挺好用的，你可以注册一个csdn帐号，直接微信扫一扫就可以；" class="headerlink" title="1.选择一个markdown编辑器，我个人觉得csdn自带的md编辑器就挺好用的，你可以注册一个csdn帐号，直接微信扫一扫就可以；"></a>1.选择一个markdown编辑器，我个人觉得csdn自带的md编辑器就挺好用的，你可以注册一个csdn帐号，直接微信扫一扫就可以；</h2><h2 id="2-注册成功后登录进去，点击写博客，先了解下markdown编辑器基本的用法，然后就可以写博客了，写好之后导出到本地"><a href="#2-注册成功后登录进去，点击写博客，先了解下markdown编辑器基本的用法，然后就可以写博客了，写好之后导出到本地" class="headerlink" title="2.注册成功后登录进去，点击写博客，先了解下markdown编辑器基本的用法，然后就可以写博客了，写好之后导出到本地"></a>2.注册成功后登录进去，点击写博客，先了解下markdown编辑器基本的用法，然后就可以写博客了，写好之后导出到本地</h2><p><img src="https://img-blog.csdnimg.cn/20191114102323454.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>如图，点击后选择MarkDown，会下载一个 .md 文件；然后找到这个md文件，把它复制到你hexo博客文件夹 中 source  下的  _posts 中，默认只有一个 hello-world.md；</p>
<h2 id="3-复制完之后然后使用文本编辑器打开它，在第一行加上title，内容自定，如"><a href="#3-复制完之后然后使用文本编辑器打开它，在第一行加上title，内容自定，如" class="headerlink" title="3. 复制完之后然后使用文本编辑器打开它，在第一行加上title，内容自定，如"></a>3. 复制完之后然后使用文本编辑器打开它，在第一行加上title，内容自定，如</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title : <span class="string">&quot;Vue中观察者模式介绍&quot;</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="5-在你自己博客站点文件夹空白处右键选择GitBashHere-输入-hexo-generate-也可以简化输入Hexo-g-，命令执行完就可以生成静态文件"><a href="#5-在你自己博客站点文件夹空白处右键选择GitBashHere-输入-hexo-generate-也可以简化输入Hexo-g-，命令执行完就可以生成静态文件" class="headerlink" title="5.在你自己博客站点文件夹空白处右键选择GitBashHere 输入 hexo generate(也可以简化输入Hexo g)，命令执行完就可以生成静态文件"></a>5.在你自己博客站点文件夹空白处右键选择GitBashHere 输入 hexo generate(也可以简化输入Hexo g)，命令执行完就可以生成静态文件</h2><p><img src="https://img-blog.csdnimg.cn/20191114102651345.png" alt="在这里插入图片描述"></p>
<h2 id="6-输入-hexo-server启动本地服务器，输入localhost-4000，直接在本地进行预览"><a href="#6-输入-hexo-server启动本地服务器，输入localhost-4000，直接在本地进行预览" class="headerlink" title="6 输入 hexo server启动本地服务器，输入localhost:4000，直接在本地进行预览"></a>6 输入 hexo server启动本地服务器，输入localhost:4000，直接在本地进行预览</h2><h2 id="7-最后输入hexo-deploy-hexo-d-，将本地文件发布到github等git仓库上"><a href="#7-最后输入hexo-deploy-hexo-d-，将本地文件发布到github等git仓库上" class="headerlink" title="7 最后输入hexo deploy(hexo d)，将本地文件发布到github等git仓库上"></a>7 最后输入hexo deploy(hexo d)，将本地文件发布到github等git仓库上</h2><p><img src="https://img-blog.csdnimg.cn/2019111410405792.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>这样文章就发布到自己搭建的HEXO博客上了</strong></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（三）–小程序切换按钮选中状态</title>
    <url>/2020/08/19/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%88%87%E6%8D%A2%E6%8C%89%E9%92%AE%E9%80%89%E4%B8%AD%E7%8A%B6%E6%80%81/</url>
    <content><![CDATA[<h2 id="小程序实践（三）–小程序切换按钮选中状态"><a href="#小程序实践（三）–小程序切换按钮选中状态" class="headerlink" title="小程序实践（三）–小程序切换按钮选中状态"></a>小程序实践（三）–小程序切换按钮选中状态</h2><p><strong>首先说一下为什么要单独写一个这个呢？在小程序中由于不能够直接对DOM元素进行操作，更没有像jquery那样addClass、removeClass这样简便方法对样式进行改变，个人觉得这个相对来说还是比较方便的，就拿出来在这里跟大家分享一下。如果你有更简单的不防写下来跟大家分享一下！</strong><br><strong>还是先看一下最终实现的效果</strong><br><img src="https://img-blog.csdnimg.cn/20200117103031283.gif" alt="在这里插入图片描述"><br><strong>接下来就看一下我们是如何实现的<br>1、布局排版，直接附上wxml代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 顶部办理状态 --&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;topView&quot; style&#x3D;&quot;position:fixed;top:49px;left:0;z-index:200&quot;&gt;</span><br><span class="line">  &lt;block wx:for&#x3D;&quot;&#123;&#123;statusList&#125;&#125;&quot; wx:key&#x3D;&quot;id&quot;&gt;</span><br><span class="line">    &lt;view id&#x3D;&quot;&#123;&#123;item.id&#125;&#125;&quot; class&#x3D;&quot;&#123;&#123;item.id &#x3D;&#x3D; isChecked ? &#39;active&#39;:&#39;&#39;&#125;&#125; topChild&quot; bindtap&#x3D;&quot;choiceStatus&quot;&gt;&#123;&#123;item.statusName&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;block&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>2、按钮样式，wxss代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.topView&#123;</span><br><span class="line">  width:100%;</span><br><span class="line">  height:48px;</span><br><span class="line">  display:flex;</span><br><span class="line">  background-color: #ffffff;</span><br><span class="line">  border-bottom:1px solid #e2e1e1;</span><br><span class="line">&#125;</span><br><span class="line">.topChild&#123;</span><br><span class="line">  width:20%;</span><br><span class="line">  height:48px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 3.4;</span><br><span class="line">  font-size:14px;</span><br><span class="line">  color:#333333;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*点击时按钮状态*&#x2F;</span><br><span class="line">.active&#123;</span><br><span class="line">  color:#E31904;</span><br><span class="line">  border-bottom:2px solid #E31904;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3、最主要的来了，js代码：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   *&#x2F;</span><br><span class="line">  data: &#123;</span><br><span class="line">    statusList: [&#123;&#x2F;&#x2F;顶部状态按钮</span><br><span class="line">      &quot;statusName&quot;: &quot;全部&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;all&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;待支付&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;draft&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;待发货&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;waitSolve&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;已发货&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;doingSolve&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;statusName&quot;: &quot;交易成功&quot;,</span><br><span class="line">      &quot;id&quot;: &quot;doneSolve&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ],</span><br><span class="line">    isChecked: 0 &#x2F;&#x2F;判断是否选中</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;绑定顶部状态切换的点击事件</span><br><span class="line">  choiceStatus: function (e) &#123;</span><br><span class="line">    var that &#x3D; this;</span><br><span class="line">    var code &#x3D; e.currentTarget.id;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      isChecked: code</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>
<p><strong>是不是很简单啊！！希望看到的大神，能给出更好的实现方法！！！     老师说过：好东西要拿出来大家分享一下哦！！哈哈。。。。。。</strong></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（二）--swiper轮播图组件</title>
    <url>/2020/08/19/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E8%B7%B5%EF%BC%88%E4%BA%8C%EF%BC%89--swiper%E8%BD%AE%E6%92%AD%E5%9B%BE%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="小程序实践（二）–swiper轮播图组件"><a href="#小程序实践（二）–swiper轮播图组件" class="headerlink" title="小程序实践（二）–swiper轮播图组件"></a>小程序实践（二）–swiper轮播图组件</h2><p>依照惯例，先看效果图：<br><img src="https://img-blog.csdnimg.cn/20200117102910120.gif" alt="在这里插入图片描述"><br>先了解下swiper组件参数配置<br><img src="https://img-blog.csdnimg.cn/20200117102922965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3podW1lbmdfMQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>轮播实现的具体步骤如下：</strong><br>  <strong>第一步：添加图片素材，我这边是放到images下，文件以及图片名字自定义即可。</strong><br><img src="https://img-blog.csdnimg.cn/20200117102932526.png" alt="在这里插入图片描述"><br>  <strong>第二步：在wxml中进行页面布局</strong><br>  在这里呢，用到了<a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/list.html">列表渲染</a> 、 <a href="https://developers.weixin.qq.com/miniprogram/dev/component/swiper.html">swiper组件</a>，三元运算符（注：由于小程序不能操作dom，三元运算符还有一个常用的使用场景是控件class样式输出，达到jQuery.addClass()的效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&quot;swiper-container&quot;&gt;</span><br><span class="line">  &lt;swiper autoplay&#x3D;&quot;auto&quot; interval&#x3D;&quot;5000&quot; duration&#x3D;&quot;500&quot; current&#x3D;&quot;&#123;&#123;swiperCurrent&#125;&#125;&quot; bindchange&#x3D;&quot;swiperChange&quot; class&#x3D;&quot;swiper&quot;&gt;</span><br><span class="line">    &lt;block wx:for&#x3D;&quot;&#123;&#123;slider&#125;&#125;&quot; wx:key&#x3D;&quot;unique&quot;&gt;</span><br><span class="line">      &lt;swiper-item&gt;</span><br><span class="line">        &lt;image src&#x3D;&quot;&#123;&#123;item.picUrl&#125;&#125;&quot; class&#x3D;&quot;img&quot; data-index&#x3D;&quot;&#123;&#123;index&#125;&#125;&quot;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">      &lt;&#x2F;swiper-item&gt;</span><br><span class="line">    &lt;&#x2F;block&gt;</span><br><span class="line">  &lt;&#x2F;swiper&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;dots&quot;&gt;</span><br><span class="line">    &lt;block wx:for&#x3D;&quot;&#123;&#123;slider&#125;&#125;&quot; wx:key&#x3D;&quot;unique&quot;&gt;</span><br><span class="line">      &lt;view class&#x3D;&quot;dot &#123;&#123;index &#x3D;&#x3D; swiperCurrent ? &#39; active&#39; : &#39;&#39;&#125;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;block&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<p><strong>第三步：在js中创建图片列表，以便于进入页面的时候就会渲染图片。</strong>　　　　　<br>　红色标注为，swiperChange方法中传入的参数用于三木运算符控制轮播图下面的圆点样式。
　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   *&#x2F;</span><br><span class="line">  data: &#123;</span><br><span class="line">    slider:[</span><br><span class="line">      &#123;picUrl:&#39;..&#x2F;images&#x2F;1.jpg&#39;&#125;,</span><br><span class="line">      &#123; picUrl: &#39;..&#x2F;images&#x2F;2.jpg&#39; &#125;,</span><br><span class="line">      &#123; picUrl: &#39;..&#x2F;images&#x2F;3.jpg&#39; &#125;</span><br><span class="line">    ],</span><br><span class="line">    swiperCurrent:0,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#x2F;&#x2F;轮播 组件控制</span><br><span class="line">  swiperChange:function(e)&#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      swiperCurrent:e.detail.current</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>小程序实践（四）–页面带参传值、JSON数据传递</title>
    <url>/2020/08/19/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%93%E9%A1%B5%E9%9D%A2%E5%B8%A6%E5%8F%82%E4%BC%A0%E5%80%BC%E3%80%81JSON%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<h2 id="小程序实践（四）–页面带参传值、JSON数据传递"><a href="#小程序实践（四）–页面带参传值、JSON数据传递" class="headerlink" title="小程序实践（四）–页面带参传值、JSON数据传递"></a>小程序实践（四）–页面带参传值、JSON数据传递</h2><p>今天呢写了一个（物流跟踪）列子，将通过这个例子来向大家介绍一下小程序是如何带参跳转、JSON数组的传递与解析。先看下效果图：<br><img src="https://img-blog.csdnimg.cn/20200117103802959.png" alt="在这里插入图片描述"><br>让我们来看一下本次案例中运用到的函数<br>1）页面跳转的方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wx.navigateTo(&#123;</span><br><span class="line">      url: &#39;..&#x2F;logistics&#x2F;logistics?dataList&#x3D;&#39; + dataList,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2）我们在参数传递的时候数据中可能会有一些特殊字符，例如 ;/? : @ &amp;=+$,#所以我们需要用函数将其进行编码，也就是下面所说的两个函数　　</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">encodeURIComponent ();  &#x2F;&#x2F;函数把字符串编码为 URI 组件。有了编码自然也会有相对的解码函数</span><br><span class="line"></span><br><span class="line">decodeURIComponent();&#x2F;&#x2F;函数可把字符串作为 URI 组件进行解码。</span><br></pre></td></tr></table></figure>
<p>3）在传递json的时候，我们需要将其转换为字符串传值，而接收的时候我们需要将json转换为对象接收，那就用到了下面的两个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JSON.stringify();&#x2F;&#x2F;将json转成字符串传值</span><br><span class="line">JSON.parse();&#x2F;&#x2F;将字符串转成对象接收 </span><br></pre></td></tr></table></figure>
<p>4)我们接收解析好的JSON如何展示在页面中呢，小程序中一般多用setData方法改变页面信息或者是刷新之后与后台交互获取最新信息。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.setData(&#123;</span><br><span class="line">    参数：值</span><br><span class="line">&#125;)   </span><br></pre></td></tr></table></figure>
<p>以上就是这次案例所用到的函数及方法，最后附上代码，便于大家参考：<br>一级页面传参：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view bindtap&#x3D;&#39;logisiticsGZFn&#39; class&#x3D;&quot;logisi&quot;&gt;查看物流&lt;&#x2F;view&gt;   </span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**查看物流 *&#x2F;</span><br><span class="line">  logisiticsGZFn: function(e) &#123;</span><br><span class="line">    var Traces&#x3D; [&#123;&#x2F;&#x2F;JSON模拟数据，项目中可以换取真实的</span><br><span class="line">      &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 08:05:37&quot;,</span><br><span class="line">      &quot;context&quot;: &quot;正在派件..(派件人:邓裕富,电话:18718866310)[深圳 市]&quot;,</span><br><span class="line">      &quot;Remark&quot;: null</span><br><span class="line">    &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 04:01:28&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;快件在 深圳集散中心 ,准备送往下一站 深圳 [深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 01:41:06&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;快件在 深圳集散中心 [深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;24 20:18:58&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;已收件[深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;24 20:55:28&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;快件在 深圳 ,准备送往下一站 深圳集散中心 [深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 10:23:03&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;派件已签收[深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        &quot;time&quot;: &quot;2014&#x2F;06&#x2F;25 10:23:03&quot;,</span><br><span class="line">        &quot;context&quot;: &quot;签收人是：已签收[深圳市]&quot;,</span><br><span class="line">        &quot;Remark&quot;: null</span><br><span class="line">      &#125;</span><br><span class="line">    ];</span><br><span class="line">    var dataList&#x3D;encodeURIComponent(JSON.stringify(Traces));&#x2F;&#x2F;函数可把字符串作为 URI 组件进行编码</span><br><span class="line">    wx.navigateTo(&#123;</span><br><span class="line">      url: &#39;..&#x2F;logistics&#x2F;logistics?dataList&#x3D;&#39; + dataList,&#x2F;&#x2F;传递参数</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>二级页面接收展示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class&#x3D;&#39;page_row top&#39;&gt;</span><br><span class="line">  &lt;image class&#x3D;&quot;goods&quot; src&#x3D;&#39;..&#x2F;images&#x2F;sf.jpg&#39;&gt;&lt;&#x2F;image&gt;</span><br><span class="line">  &lt;view class&#x3D;&#39;page_clu logistics&#39;&gt;</span><br><span class="line">    &lt;text&gt;物流公司: 顺丰速运&#123;&#123;wuliuType&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;text&gt;物流单号:221009887344 &#123;&#123;wl_dh&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;text&gt;官方电话:95338 &#123;&#123;wl_phone&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&#39;br&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;view class&#x3D;&quot;middle&quot;&gt;</span><br><span class="line">  &lt;view class&#x3D;&quot;top_sh&quot; hidden&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;top_icon&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;text class&#x3D;&quot;address&quot;&gt;[收货地址]&#123;&#123;userAddress&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;on&#39; style&#x3D;&quot;border-left:1px dashed #d0d0d0;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;block wx:for&#x3D;&quot;&#123;&#123;Traces&#125;&#125;&quot; wx:key&#x3D;&quot;index&quot; hidden&#x3D;&quot;&#123;&#123;isShowWl&#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;view class&#x3D;&#39;order&#39;&gt;</span><br><span class="line">      &lt;text class&#x3D;&quot;time&quot;&gt;&#123;&#123;item.time&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;icon &#123;&#123;0&#x3D;&#x3D;index?&quot;in&quot;:&quot;no_in&quot;&#125;&#125;&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view class&#x3D;&#39;logistics_centent page_clu&#39;&gt;</span><br><span class="line">        &lt;text&gt; &#123;&#123;item.context&#125;&#125;&lt;&#x2F;text&gt;</span><br><span class="line">      &lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view wx:if&#x3D;&quot;&#123;&#123;index&#x3D;&#x3D;Traces.length-1&#125;&#125;&quot;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">      &lt;view wx:else class&#x3D;&#39;on&#39;&gt;&lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;view&gt;</span><br><span class="line">  &lt;&#x2F;block&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line">   * 生命周期函数--监听页面加载</span><br><span class="line">   *&#x2F;</span><br><span class="line">  onLoad: function(options) &#123;</span><br><span class="line">      var dataTemp &#x3D; decodeURIComponent(options.dataList);&#x2F;&#x2F;函数可把字符串作为 URI 组件进行解码。</span><br><span class="line">      var Traces &#x3D; JSON.parse(dataTemp);&#x2F;&#x2F;航一页传过来的json字符串转化成json数组  物流信息进度</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        Traces: Traces</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>以上便是案例完整的代码，粘贴复制即用。最后说一下，所有的页面获取的数据都需要在onLoad()方法中执行。</p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>小程序–base64格式图片的显示以及保存</title>
    <url>/2020/08/19/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%20base64%E6%A0%BC%E5%BC%8F%E5%9B%BE%E7%89%87%E7%9A%84%E6%98%BE%E7%A4%BA%E5%8F%8A%E4%BF%9D%E5%AD%98/</url>
    <content><![CDATA[<h2 id="小程序base64格式图片的显示和保存"><a href="#小程序base64格式图片的显示和保存" class="headerlink" title="小程序base64格式图片的显示和保存"></a>小程序base64格式图片的显示和保存</h2><p>在小程序开发的过程中，我们在使用base64图片的时候，会出现图片不显示的问题，是为什么呢？今天在这里把自己的踩过的坑分享一下。<br>当我们拿到如下base64格式的图片（如下图）时，<br>base64格式的图片数据：<br><img src="https://img-blog.csdnimg.cn/20200116154325482.png" alt="在这里插入图片描述"><br><strong>一、如何显示 ？</strong><br>使用image标签，src属性添加data:image/png;base64,<br><font color=red>（注意：若imgData返回数据中含有data:image/png;base64,时，src直接写src=”“即可）</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;image src=<span class="string">&quot;data:image/png;base64,&#123;&#123;imgData&#125;&#125;&quot;</span>&gt;&lt;/image&gt;</span><br></pre></td></tr></table></figure>
<p><strong>如果按照上面的方法，图片还是显示不出来？</strong><br>在返回的base64的数据中存在回车换行，你只需要回车换行替换为’’即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 后台返回的base64数据</span></span><br><span class="line"><span class="keyword">var</span> base64Image = <span class="string">&#x27;base64数据&#x27;</span> </span><br><span class="line"><span class="comment">// 将回车换行换为空字符&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">var</span> imgData = base64Image.replace(<span class="regexp">/[\r\n]/g</span>, <span class="string">&#x27;&#x27;</span>) </span><br></pre></td></tr></table></figure>
<p>然后用image标签的形式引入就可以正常显示了。<br><strong>二、那么如何保存？</strong><br>使用writeFile及saveImageToPhotosAlbum API保存至相册，具体JS代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> imgSrc =  <span class="built_in">this</span>.data.imgData;<span class="comment">//base64编码</span></span><br><span class="line">    <span class="keyword">var</span> save = wx.getFileSystemManager();</span><br><span class="line">    <span class="keyword">var</span> number = <span class="built_in">Math</span>.random();</span><br><span class="line">    save.writeFile(&#123;</span><br><span class="line">      filePath: wx.env.USER_DATA_PATH + <span class="string">&#x27;/pic&#x27;</span> + number + <span class="string">&#x27;.png&#x27;</span>,</span><br><span class="line">      data: imgSrc,</span><br><span class="line">      encoding: <span class="string">&#x27;base64&#x27;</span>,</span><br><span class="line">      success: <span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        wx.saveImageToPhotosAlbum(&#123;</span><br><span class="line">          filePath: wx.env.USER_DATA_PATH + <span class="string">&#x27;/pic&#x27;</span> + number + <span class="string">&#x27;.png&#x27;</span>,</span><br><span class="line">          success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">            wx.showToast(&#123;</span><br><span class="line">              title: <span class="string">&#x27;保存成功&#x27;</span>,</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;,</span><br><span class="line">          fail: <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(res)</span><br><span class="line">      &#125;, <span class="attr">fail</span>: <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>
<p>本想使用wx.previewImage来预览图片并保存，但是此API的参数只能是网络链接，所以放弃，采用以上方法保存。</p>
<p>说明：</p>
<ol>
<li>wx.getFileSystemManager()  是获取文件管理器对象</li>
<li>wx.env.USER_DATA_PATH + ‘/pic’ + number + ‘.png’表示生成一个临时文件名</li>
</ol>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
  </entry>
  <entry>
    <title>移动开发IOS和安卓遇到的兼容性问题</title>
    <url>/2020/08/19/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91IOS%E5%92%8C%E5%AE%89%E5%8D%93%E7%A2%B0%E5%88%B0%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p><strong>1.JavaScript中的Date对象在Safari与IOS中的坑</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date =<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">&quot;2018-07-25 19:25&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>这段代码是获得字符中指定的日期，它Firefox、Chrome中就能运行，但是放在Safari就会报错，错误是NaN<br>解决办法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将xxxx-xx-xx的时间格式，转换为 xxxx/xx/xx的格式 </span></span><br><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;2018-07-25 19:25&#x27;</span>;</span><br><span class="line">value = value.replace(<span class="regexp">/\-/g</span>, <span class="string">&quot;/&quot;</span>);</span><br></pre></td></tr></table></figure>
<a id="more"></a>**2.禁止图片点击放大**
<p>部分安卓手机点击图片会放大，如需要禁止放大，只需要设置css属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">img&#123; </span><br><span class="line">    pointer-events: none; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这个会让img标签的点击事件失效，如果想要给图片添加点击事件就要给上面再写一层<br><strong>3.禁止页面缩放</strong><br>这样设置在ios10系统中是失效的，如果需要禁止ios缩放，下面代码亲测有用 </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">      <span class="comment">//禁止双击放大 </span></span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchstart&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  </span><br><span class="line">            <span class="keyword">if</span>(event.touches.length&gt;<span class="number">1</span>)&#123;  </span><br><span class="line">                event.preventDefault();  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;)  </span><br><span class="line">        <span class="keyword">var</span> lastTouchEnd=<span class="number">0</span>;  </span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;touchend&#x27;</span>,<span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;  </span><br><span class="line">            <span class="keyword">var</span> now=(<span class="keyword">new</span> <span class="built_in">Date</span>()).getTime();  </span><br><span class="line">            <span class="keyword">if</span>(now-lastTouchEnd&lt;=<span class="number">300</span>)&#123;  </span><br><span class="line">                event.preventDefault();  </span><br><span class="line">            &#125;  </span><br><span class="line">            lastTouchEnd=now;  </span><br><span class="line">        &#125;,<span class="literal">false</span>);</span><br><span class="line">      <span class="comment">//禁止手势放大</span></span><br><span class="line">      <span class="built_in">document</span>.addEventListener(<span class="string">&#x27;gesturestart&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">         event.preventDefault();</span><br><span class="line">      &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>4.禁止 iOS 识别长串数字为电话</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;meta name=<span class="string">&quot;format-detection&quot;</span> content=<span class="string">&quot;telephone=no&quot;</span>&gt;</span><br></pre></td></tr></table></figure>
<p><strong>5.禁止复制、选中文本</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">设置CSS属性 -webkit-user-select:none</span><br></pre></td></tr></table></figure>
<p><strong>6.JS跳转手机QQ的聊天页面</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Android: URL</span></span><br><span class="line">mqqwpa:<span class="comment">//im/chat?chat_type=wpa&amp;uin=your QQ&amp;version=1&amp;src_type=web</span></span><br><span class="line"><span class="comment">//IOS: URL</span></span><br><span class="line">mqq:<span class="comment">//im/chat?chat_type=wpa&amp;uin=your QQ&amp;version=1&amp;src_type=web</span></span><br></pre></td></tr></table></figure>
<p><strong>7.一些情况下对非可点击元素如(label,span）监听点击事件，不会在IOS下触发，css增加<font color=red>cursor:pointer</font>就搞定了</strong><br><strong>8.上下拉动滚动条时卡顿、慢（未测试）</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">-webkit-overflow-scrolling: touch;</span><br><span class="line">overflow-scrolling: touch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Android3+和iOS5+支持CSS3的新属性为<font color=red>overflow-scrolling</font><br><strong>9.清除button,input,a标签的默认样式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a:hover, <span class="attr">a</span>:active,button,<span class="attr">input</span>:focus&#123;</span><br><span class="line">  outline: none;</span><br><span class="line">  border: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>前端-Js</category>
      </categories>
  </entry>
</search>
